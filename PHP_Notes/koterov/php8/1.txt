1) При створенні класу тепер є можливість зразу вказувати тип свойства (один або декілька) - puЬlic intl|float $х;

	- І якщо я задам не той тип, зразу буде fatal error
	
	- public ?int $х; - ?int означает, что значение может принимать и целое число, и быть равным null
	
2) с версии РНР 8.1 , классы поддерживают rеаdоnl у-свойства - public readonly string $hello;

	- применять ключевое слово readonly можно только тогда, если явно указывается тип переменной
	
	- попыт­ка чтения неинициализированной переменной вызывает ошибку. Тобто в мене є класс - class Greeting {
													public readonly string $hello;
												}
												
												$object = new Greeting;
												echo $object->hello; // РНР Fatal error
												
3) кон­станты не могут принимать неопределенное значение null

	- Созданная константа не может быть уничтожена
	
	- Начиная с версии РНР 8.1, в качестве значения константы могут выступать объекты - 	define ('START_TIМE ', new DateTirne());
												echo START_TIМE->format('d-m-Y H:i:s'); / / 23-04-2022 1 3 : 42 : 56

4) Точно так же, как и в случае со статическими членами классов, к константам нельзя обращаться при помощи оператора ->. Для обращения к ним используется оператор разрешения области видимости - ::

5) Коли я використовую оператор . і обє'дную строку з числом, весь вираз перетвориться в строку.

	- ЦЕ ВАЖЛИВО. Робота зі строками і числами залежить від оператора. Наприклад оператор . придназначений для роботи зі строками, тому вирази з ним завжди повертають строку, а от оператор + придназначений для чисел, тому пхп буде робити зі строки число.
	
	- Починаючи з пхп 8 значение, которое невозможно преобразовать в число без потери информации завершится ошибкой - РНР Fatal error. До цього стока переобразовувалась в null
	
		- Саме тому, раніше (0 == 'Universe') повертало тру. Тобто зрівнювалось 0 i null.
		
		- echo 42 == ' 42'; // true - Перед 42 стоїть пробіл

6) Оператор кома в строці відіграє роль оператора . 

	- $numЬer = 216;
	- echo 'Сегодня ', $numЬer, ' участников'; // Сегодня 216 участников
	
7) $х <=> $у - В сnучае равенства переменных onepaтop возвращает О. Если $х больше $у, возвращается положительное число, если мeншe - отрмцательное

8) $х <> $у - Эквивалентен оператору !=

9) class AgentSmith {}
	$smit = new AgentSmith();
	$wesson = new AgentSmith();

	if ($smit == $wesson)  echo 'Объекты равны';
	if ($smit === $wesson) echo 'Объекты не эквивалентны'; - Суть у тому, що оператор строгого зрівняння перевіряє - чи ссилаються ці змінні на 1 і той же обєкт. А вони не ссилаються. Це 2 різні обєкти. Хоча нестроге зрівнення дасть тру. 
	
10) на­чиная с РНР 8.0, приоритет битовых и арифметических операторов стал выше, чем приоритет оператора «точка". 

	- echo '2 + 2 = ' . 2 + 2; // 2 + 2 = 4 - Тобто спочатку виконалась операція 2 + 2, а вже потім конкатинація.
	
	- Раніше (2 + 2) брали в дужки. А це означає, що дужки змінюють приоритетнісь не тільки в арифметичних операціях, а і в інших (наприклад конкатинація) щоб оприділити що буде перше - додавання чи конкатинація.
