1) Mage.php - основний статичний клас мадженти
	- тут є приорітет кодпулів найменший у lib потім core потім comunity потім local. ТОбто автолоад спочатку буде шукати в local, якщо знайде, заспокоїться, якщо ні піде шукати далі
2) downloader - у цій папці модулі, які встановлюються через адмінку. По хлду у цій папці функціонал, який установлює модулі
3) у папці errors помилки, але не ті до якийх я звик а більш низького рівня. По ходу ще на рівні роботи самої мадженти а не вже самого сайту
4) В папці include будуть вже готові шляхи з учотом приоритетів. Тобто будуть щляхи до тих файлів, які будуть використовуватись. Там десь нижче я писав
5) Папка js - тут общі cкріпти. Для фронта, адмынки... Звичайно у кожного модуля є власна папка з скріптом
6) У папці lib - файли якы можна використовувати. Вони в цій папці, так як для них не знайшлось ніде місця. У мадженті все розкладено по модулях, а це не модулі, просто файли. Але якщо мені треба буде звідти використати якиїсь клас (Zend/Act/Role.php), який знаходиться у папцы lib, то мені треба буде указати цей шлях Zend/Act/Role.php але без папки lib. Автолоадер по ходу так налаштований, що в останню чергу буде шукати клас у цій папці
7) У папці медіа будуть всі картинки у проекті по ходу. Наприклад я через адмінку загружаю картинку продукту, вона поставиться в media/catalog/product/папка/папка2 і до назви картинки може додатись назви цих папок - папкапапка2-імякартинки.jpg
	- Картинки продуктів знаходяться в media/catalog/product. Якщо я буду зменшувати картинки через мадженту, то ці картинки будуть знаходитись в папці media/catalog/product/cache
8) Папка shell - тут знаходяться всі файли які будуть запускатись з командної строки. Але тут тільки індекс мені знайомий
9) в папці design я храню тільки phtml i xml для темплейтів
10) skin - сss, іконки для сторінки, на рахунок великих картинок не знаю
11) var/log - тут логи. Їх можно кастомізувати, додати ще 1 файл логів, але Вова тільки розказував як а не показував
12) var/package - тут по ходу складуються конечні xml-ки
13) var/report - це як логи, але тут храняться ексепшни. Я не дуже зрозумів різницю, але якшо в логах помилки не має, пошукати тут.
14) логи перыодично треба чистити, особливо при створенні нової теми з старої. Файл логів може займати і 100 мб і це тормозить систему
15) var/session - це сессії пхп (суто для розробки мадженти по ходу, так як на продакшні її не має). на продакшні сесії краще хранити в мемкеш вроді. це стандартний функціонал в мадженті. Досить в app/etc/local.xml включити використовування мемкеш
16) Щоб працювати з маджентою, треба в htacsess добавити memory limit i max execution time
	- Також у цей файл треба добавити обробки для контролера. Всі інші налаштування треба перенести в php.ini.sample
17) htacsess що в корневій папці вліяює тільки на фронт для тих запросів які йдуть через апач. Я так зрозумів, що їх вони не приміняться до php.ini Вова казав що і на адмінку це не вліяє, хоча дивно, на свочі вліяло
18) api.php Маджентовська апішка. Через цей файл маджента взаємодіє з іншими сервісами
19) cron.php - скріпти для крона.
	- Але він не запускається на пряму, для цього використовується bash скріпт cron.sh. Тобто на сервері треба налаштувати системний крон, який буде запускати cron.sh, а той в свою чергу буде запускати cron.php
20) get.php - цей фай відповідає за функціонал діставання медіа файлів (картинок) з бази даних. Тобто якщо буде ситуація що картинки будуть хранитись в базі, то треба буде лізти у цей файл. Типу можна медіа хранити в базі а 2 інстанси дудуть тягнути з неї картинки. Це в адмінці налаштовується звідки будуть тягнутись картинки
21) instal.php - дозволяє встановити мадженту з командної строки. Типу я установлював через браузер, а можна закинути файли мадженти на сервер і удалено через консольку установлювати
22) app/code/comunity хранить модулі, які я скачав з нета. Тут можна або видаляти або добавляти, але не змінювати файли
23) app/code/local/ - цей кодпул взагалі можна відключити в local.xml Наприклад коли йде оновлення мадженти
24) app/code/core/ - Під час оновлення ця папка повністю перезаписується. Тому дуже важливо коментувати код. Наприклад у корі функціонал повністю змінився і вони взагалі не схожі з попереднім. А я перезаписав його в локалі і добавив свій функціонал. Той чувак, який буде працювати після мене взагалі не зрозуміє для чого він. Можливо навіть він не зможе знайти корневі класи, які я використовую, так як їх вже немає 
25) Структура у всіх модулів одинакова
26) app/etc/modules - підключення всіх модулів. Не обовязково щоб файли називались як модуль. Взагалі є файл Mage_All.php у якому підключаються багато модулів (з папки кор). Це зроблено тому що ці файли не кешуються. Тож коли я створюю багато своїх модулів, є сенс створити 1 файл і у ньому підключити ці модулі(Smile_All.php)
27) Структура
	- Block - кірпічики з яких створюється візуальний інтерфейс. В загальному екстендяться від Mage_Core_Block_Abstract
	- controlers, data, etc, sql - пишуться з маленької букви щоб їх не захватив автолоадер (мабуть в цілях безпеки). Фронтові кортролери в папці controllers екстендять клас Mage_Core_Controller_Front_Action, бекові будуть розширяти клас Mage_Adminhtml_Controller_Action
	- Сontrolers - тут буде кастомний контролер
	- Model - є ресурсна і бізнес модель. Ресурсна зберігає в базу бізнес логіку. Русурсну часто називають колекція, так як вона часто повертає колекцію. В загальному екстендяться від Mage_Core_Model_Abstract. Я поки не зрозумів це але Вова казав що якщо моя модель буде хранитись в БД (по ходу записувати дані в базу), то вона має наслідуватись від Mage_Core_Model_Abstract і в конфігах мого модуля моє присуцтвувати ресурсна модель (хз що це значить).
	- etc - конфіги мадженти і активізація їх. У ньому є файл local.xml.template який був повністю скопійований в local.xml, а даны у фігурних дужках були замінені на ті, які я ввів при установці. Крім файла сесій, у фйалі є дата установки. Це єдине місце де маджента перевіряє чи вона установлена. Якщо її стерти, вона кине на стоорінку установки мадженти. Також тут прописані креди для зєднання з адмінкою
	- data, sql - використовуються при оновленні модуля. Типу в конфігах прописується версія модуля і коли вона міняється то при обробці запроса буде виконаний пошук інстал або абгрейд скріптів у цих папках. Хоча коли я писав інстал скріпти, не треба було міняти щось вручну, маджена бачила цей скріпт і оновляла модуль. Різниця в цих папках у тому що у sql зазвичай редагуютьтя таблиці бази (добавляються атрибути і тд), а в data зазвичай оновлюються дані модуля (cms сторінку добавити наприклад)
28) Тут назва класа відповідає шляху до цьго файла Кампанія_Модуль_Папка_Файл.php
29) В папці design є папка install, яка використовується тільки при установці мадженти
30) В папці design є теми. У цих темах завжди буде папка default (і 1-їй буде і папка base, але при створенні моєї теми, її не треба створювати ) і туди будуть кластись файли. Крім default можна створювати і інші папки. Тут буде вже схода логіка. default головний але новостворена буде мати більший приорітет. Це можна використати у випадках коли наприклад мені треба змінити магазин під новий рік. Стсорюю папку new_year і кладу в неї ті файли які хочу перебити (Наприклад хедер. Добавити ялинки і сніжинки в нього). Вова коли копіював базовий файл у папку new_year, то він і скопіював її у папку нового модуля default. Мабуть так і треба. Ця нова тема що я створив у папці design, буде видна у адмінці, і її можна буде активувати. 
	- По їдеї переклади теж мали б канати в net_year, але у мене не канало, тільки в default. До речі у м1 транслейти теж можна писати у модулі але дуже не значні і зазвичай для випадків як для теми new_year locale/en_US/translate.csv - він по ходу перебє стандартні
31) $this - блок до якого привязаний цей phtml в xml
32) Подвійний андерскор __ - це метод який для перекладів, який знаходиться у дата хелпері. Не знаю чи це є в м2, але у м1 Вова перекладав через хелпер, вказуюучи модуль $this->helper('catalog')->__('Availability:') і слово Availability перекладалось і на frontend і в adminhtml
	- У файлі модуля, etc/config.xml налаштовується як буде називатись файл перекладу. Отдільно може вказуватися файл для frontend і adminhtml.  <translate><modules><Mage_Catalog><files><default>Mage_Catalog.csv - цей файл знаходиться у app/local/en_EN/ Там ще є налаштування для всього іншого. Розписувати цей файл не буду, все в ньому більш мен ясно
33) Обовязково треба перекладати з англійської на англійську. Адже то слово яке я перекладаю не відноситься до локал стора, це просто слово, яке англійський стор не бачить
34) Якщо попадеться ситуація коли у папці community будуть 2 модулі, які реврайтять одну модельку, то маджента не зробить так що функціонал обох запрацює. Треба буде обэднувати їх в локалі (екстендити один від одного або просто зливати) - це єдине рішення
35) Всі xml-ки що э у файлі конфіг при зборці накатуються в 1 великий файл конфігів(збираються всі гонфіги для цього модуля в 1) + ще до цього накатуються конфіги з бази даних
	- Спочатку маджента загружає файли з папки etc/modules. Потім сходячи з того що є в цих файлах, загружаються всі файли що є в etc/config.xml. Після того як ці файли будуть збиті в 1 конфіг файл, на нього накотиться etc/local.xml  
	- <global> - це батько для арії фронтенда і бекенда
36) Mage::helper(сюди будуть передаватись файли, які лежать у хелпері модуля. php в кінці файла не треба писати. Логіка шляху буде наступна - <config>/папка, у якоъ батько папка Helper і потім шлях до файла, але роздільником буде не слеш а андерскор Mage::helper(catalog/convert_adapter_catalog(останній, це вже файл))). Через цей хелпер я витягую хелпер модуля Аpi2. 
	- Назва хелпера яку я прописав у дужках не залежить від назви модуля, вона залежить від назви яка лежить у конфіг файлі цього модуля Аpi2/etc/config.xml - І у ньому є строчки helper - <helpers><api2(це і буде в дужках)><class>Mage_Api2_Helper</class> В ідеалі назва хелпера має бути така як назва модуля, але це тільки рекомендація. Також має бути назва компанії (Company_heplname). api2 це хелпер з папки core, тому у цих тегах назву компанії не треба
	- Мабуть є якась закономірність що у тегах <api2><class>Mage_Api2_Helper</class></api2> клас називаэться Mage_Api2_Helper і у файлі папці хелпера у файлі Data.php клас називається Mage_Api2_Helper_Data, але Вова про це нічого не сказав. Ну а назва для класа хелпера стандартна - кампанія, модуль,...
	- це ж саме стосується витягування моделей, блоків і інших елементів які можна так витягнути - Mage::getModel(шлях до файлу), Mage::getBlock(), короче треба загуглити ще що ще можна витягнути. З того що я зрозумів, то можна витягнути все що знаходиться в  модуль/etc/config.xml (я там бачив <cache>, <resources>, ...). Мабуть щоб їх витягнути діють ті ж самі правила що і для хелпера. 
	- Суть у тому що коли я витягую собі дані хелпера, модельки, ... то не треба дивити на назву модуля, треба дивити в конфіг файл цього модуля. і вже ту назву писати в шляху до файла - Mage::getModel(<config_name>/шлях до файлу в) (якщо getModel, значить в папці Моdel, якщо б замість ::getModel було щось інше, була б інша папка (Block наприклад для ::getBlock))
	- В файлі config.xml тег <model> знаходиться в групі тега <global>, але то вже таке, для общого розвітія
37) Не завжди Хелпер, модель,... можна знайти у config.xml і звідти витягувати їх так як я описував зверху. Буває, що вони не прописані у цьому файлі. Тоді скоріш за все замість того щоб шукати назву в xml, треба буде взяти просто назву модуля. В каталозі не прописані імена по яких треба витягувати хелпери, але папка Helper.
38) Всі хелпери - це сінглтони, для них є реєстр де храниться дані матода getInstanse(); а у моделы немає. Кожного разу коли я буду писати ::getModel() - буде викликатись нова модель. Для моделі не має моделі за замовчуванням, а для хелпера є - називається він helperdata. Тобто якщо у мене у папці Хелпер є Data.php, то якщо я не уточню який хелпер брати з модуля, вибереться він - Mage::helper(catalog(У цьому випадку вибереться файл Catalog/Helper/Data.php)) == Mage::helper(catalog/data)
39) Тут воно якось так работає, що якщо я витягнув файл модельки, хелпера,... у змінну, а у файлі є клас, то у змінної вже будуть методи цього класа. Мабуть це якось звязано з правильним синтаксисом назви класів і тд 
40) Событія і обсервери. У мадженті є сторона, яка кидає івент і яка приймає його. Маджента прямо кишить ними. 
	- Приймають івенти обсервери. Вони знаходяться у модулі. Щоб подивити чи модуль приймає івент, треба зайти у його etc/config.xml і пошкати теги <observers>. Над ним є тег <event>. Сюди звичайно можна додати свый обсервер. 
 - Обробляє обсервери моделька. Хоча дивно чому саме моделька, може ж бути папка Observer у модулі
<store_save_commit_after> - назва івента
<observers> 
    <index> - назва мого обробщика. Вона довыльна, але краще щоб була якась логыкау назві. Наприклад якщо це перший обсервер, то можна назвати його <кампанія_модуль>
        <class>index/observer</class> - Тобто у тегах вказаний шлях до неї Index(це модуль)/Model/Observer.php. Принцип іменування той самий як і в хелперів, блоків,..
        <method>processStoreSave</method> - цей метод е у цьому класі і він буде викликаний
    </index>
</observers>
</store_save_commit_after>
 Та сторона, яка викликає івент, буде викликати Mage::dispatchEvent В общому Вова дуже мало розказав про це. Все що я запишу це буде або вода, або моъ догадки
	 - Це робоча схема выдловлювання івента який викликається у фронт контролері, перед роутінгом
		<controller_front_init_before> - цей івент викликається тут - /lxc/modyf/home/smile/modyf/src/app/code/core/Mage/Core/Controller/Varien/Front.php
                <observers>
                    <modyf_meeting02> 
                        <type>model</type>
                        <class>Modyf_Catalog_Block_Product_View</class>
                        <method>controllerFrontInitBefore</method>
                    </modyf_meeting02>
                </observers>
            </controller_front_init_before> 

41) Крони. Крони виповняють cron.php i cron.sh що в корневій папці. Але самі завдання для них знаходяться в модулі. Теж Вова дуже мало про це розказав
42) Піддомени херово для SEO
43) Вова за це не розказував, але я заліз у фай конфігів( Module/etc/config.xml ) і тут є строки які реврайтять нативні маджентовські класи - <global>
																		<blocks>
																		    <modyf_cms>
																			<class>Modyf_Cms_Block</class>
	- Тобто Modyf/Cms/Block.php справді існує. Мабуть у першій мадженті щоб зареврайтити нативний клас не досить його просто постави у локальний кодпул, треба ще і конфігах це записати
44) Mage_Core_Controller_Varien_Front - це фронтовий контролер мадженти. Він займається роутінгом і цим всім...
	- У нього є метод init(), а у цього метода є івент "controller_front_init_before". Якщо перехватити цей івент, то на цей івент можна створити свій власний роут, який буде виконуватись до нативних роутів. Створення свого власного роута я описував у файлі-уроці по другій мадженті. Також тут є івент на який можна повісити свій роут і він буде виконуватись після нативних роутів
	- З цікавих івентів можна відмітити ще 'controller_front_send_response_before' i 'controller_front_send_response_after', які викликаються під час і після загрузки html, який вже віддається у клієнтський браузер (тобто ці івенти викликаються майже вкінці загрузки сайту)

https://modyf.lxc/chaussures-de-securite-timberland-pro-eagle-s3-src-hro-brown-127205-2


