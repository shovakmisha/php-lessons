1. Для кодіровки післф підключення до БД
mysql_query("SET NAMES cp1251");
mysql_query("SET CHARACTER SET cp1251");
mysql_query("SET character_set_client = cp1251");
mysql_query("SET character_set_connection = cp1251");
mysql_query("SET character_set_results = cp1251");
 
2. По ходу \n переносит строки лиш в ісходному коді, а не на сторінці
3. Масиви у PHP схожі на java-script. У PHP можна створювати масиви і так - $name = array(0 => "Саша",1 => "Маша"); 
	- Або щоб PHP роздав кожному порядковий індекс // $name = array("Саша", "Маша"); - У Саша буде 0, у Маша буде 1.
	- PHP роздасть кожному порядковий індекс і у такому вирадку - $name[] = "Саша"; $name[] = "Даша"; 
4. Асоціативний масив - схоже на об’єкт у java-script. У кожного елемента у масиві є своя нназва. І називати елемент масива я можу як хочу. // $capital = array(Ukraine => "Київ", Росія => "Москва"); 
	- $capital['Czech'] = 'Praha';
 - Вивести значення масива у строці не можна. Треба робити або пристиковку. 'Color '.$machine['bmw']['color']; 
 - Або взагалі  не класти лапки у квадратних дужках // echo " Столица Чехии -  $capital[Czech]"; інакше буде помилка
 - Або взяти це у {} // "... {$user['name']}"
6. Є ще багатовимірні масиви. Це коли масив в масиві. // $auto["bmw"] = array ("color" => "білий", "year" => "2005р.", "probeg" => "100000км");
7. Ф-ції у PHP схожі на java-script. 
	- Змінні теж локальні.
8. Ф-ція count(); - пощитає, скільки елементів в масиві.
9. Ф-ція exit(); - Після написання цієї ф-ції, строки, які написані після неї виповнятися вже не будуть. Можна написати в цю ф-цію текст, він виведеться на сторінку // exit('<p>Робота закінчилась на 55 строці</p>');
10. Ф-ція trim(); - Обрізує пробели по краях строки. Не міняє саму змінну. Тож резельтат краще сохраняти у отдільній змінній // $new = trim($name);
11. Ф-ція list(); - Присвоює за 1 раз деякі значення декільком змінним. В основному це кикористовується, коли з масива витягують елементи і присвоюють їх змінним // $box = array("Персик", "Огурец"); list($fruit, $vegetable) = $box; - Так і буде іти попорядку, змінній $fruit присвоїться "Персик", а $vegetable - "Огурец".
12. Дата - $d = date("d-m-y"); - Замість d-m-y є много варіантів. Мож загуглити.
13. Метод get - передає елементи через адресну строку. https://www.sayt.ru?element
14. Всі елементи Метода get знаходяться у масиві $_GET. Щоб покласти туди змінну, треба $a = $_GET['a']; - Тепер у змінній $a буде змінна яка знаходиться у масиві _GET і тепер нею можна буде управляти з браузера. ?a = 3; Тепер у масиві змінній a присвоєно 3. 
	- Заносити змінні у масив $_GET з адресної строки не можна з точки зору безпеки
	- Щоб дати значення декільком змінним, треба у коді покласти їх у масив _GET: $a = $_GET['a']; $b = $_GET['b']; В адресній строці писати це все діло через амперсант https://www.sayt.ru?a=3&b=4
15. Type 'submit' - означає, що файл передасться обработчику
16. Якщо йде передача методом POST, то у передаваємий файл передаються змінні, які будуть називатися так само як ім’я елемента. Тобто <input name="vasya">, передасться змінна $vasya
	-  _POST схожий на _GET, теж масив, теж не можна працювати напряму з переданим елементом, спочатку треба витягти його з масива _POST // $b = $_POST['b'];, Бо елементи передаються не на пряму, а через цей масив. Спочатку треба убідитися, що змінна є в масиві, а потім вже можна працювати з цими змінними. 
18. Коли я прошу сайт у сервера, я посилаю йому дані про себе, Всі ці дані він хранить у масиві $_SERVER;
	- $_SERVER['REMOTE_ADDR'] - IP адрес
	- $_SERVER['REMOTE_ADDR'] - Браузер і ОС
	- багато ще...
19. include - підключає файл. include=("second.php");
20. БД создавати з id, а на id треба
	- Класти галочку первичний, щоб не создавались дублікати
	- Класти галочку auto_increment, щоб у нового елемента був інший порядковий номер
21. Типи полів
	- int - ціле число
	- float - не ціле число
	- varchar - короткий текст (максимум 250 символів)
	- text - довгий текст (довжину не треба вказувати)
	- date - дата
	- datetime - дата і час
22. Підключення до бази даних. Mysql сервер хранит у собі бази даних. Щоб мати доступ до баз даних, спочатку треба соєдинитися з Mysql сервером. Це те, що я создавав в привілегіях. За це відповідає ф-ція mysql_connect('хост(майже завжди localhost)', 'імя', 'пароль'); Тепер я в Mysql сервері.
	- Зазвичай ф-цію mysql_connect беруть присвоюють змінній($db), і у змінній буде ідентифікатор, який можна вказати при підключенні до конкретної бази даних, хоча його вказувати не обовязково.
	- mysql_select_db("імя БД", змінна $db );  //підключивимся до бази данних. змінну $db вказувати не обовязково
23. Робота з таблицями БД
 SELECT - Выборка
 INSERT - Вставка
 UPDATE - Изменение
 DELETE - Удаление
24. Ф-ція mysql_query(); - запрос до БД - $t = mysql_query("SELECT * FROM firma", $db(необовязково) ); - вибрати всі поля з таблиці firma і присвоїти змінній $t;
	- Замість зірочки може бути конкретний стовбчик. Наприклад якщо у таблиці є стовбчик з id, замість зірочки можна написати 'id'. Можна вибрати декілька стовбчиків, написавши їх через кому.
	- Якщо я хочу конкретний рядок, то mysql_query("SELECT * FROM firma WHERE id='...'"
	- У змінній $t буде false/true в залежності від успішності операції. Тож переверити чи операція пройшла успішно, можна if( $t == true ){...}
	- Значення false/true у змінній $t буде не лише під час виборки, а й після інших операцій з mysql_query (вроді)
25. Ф-ція mysql_fetch_array($таблиця БД) - витягне першу строчку з таблиці БД у асоціативний масив, де назва значення буде імя стовбчика. Треба покласти цей процес у змінну, щоб у змінній був масив, бо інакше працює не добре.
	- Важливо. У цієї ф-ції є внутрішній лічильник. Тобто якщо вона зробила масив з першої строки, а строк є декілька, то якщо написати ф-цію ще раз, вона вже витягне другу строку таблиці, і так попорядку. Якщо цю ф-цію написати більше разів, ніж є строк у таблиці, повернеся пустий масив.
	- Навіть у циклі while треба писати ф-цію з присвоєнням до змінної, бо инак робит не коректно - while( $zminna = mysql_fetch_array($таблиця БД) )
26. Ф-ція printf(); - Виводить інформацію. Спочатку кладуться маркери і якщо хочу розділові знаки між ними, а потім вже те, що я хочу вивести // printf ("%s<br>%s<br>%s<br>%s<br><br>",$myrow['id'],$myrow['name'],$myrow['lastname'],$myrow['dol']);
27. Оператор AND діє логічно, а OR візьме і ліву і праву строку. Тобто, якщо є запис - "SELECT * FROM firma WHERE id='2' AND name='Алексей' ", то вибереться строка в якій id='2' і є name='Алексей'
	- А якщо буде такий запис "SELECT * FROM firma WHERE id='2' OR name='Алексей' ", то вибереться і та строка в якій id='2' і та в якій є name='Алексей'
28. ORDER BY - відсортірувати по... // "SELECT * FROM firma ORDER BY ='name'" - візьме всі елементи з таблиці firma, і розкладе їх у алфавітному порядку в залежності від поля name. Якщо б замість 'name' було 'id' або ще щось числове, то сортіровка була б від малого до великого.
	- Якщо вкінці добавити слово 'DESC', то сортіровка піде навпаки, від більшого до меншого. // "SELECT * FROM firma ORDER BY ='name' DESC". Для кожного сто вба отдільно прописувати по чому сортірувати - ORDER BY ='name' DESC, date DESC
29. LIMIT - огранічує к-сть елементів, які беруться у виборку // "SELECT * FROM firma ORDER BY ='name' DESC LIMIT 2" - Вибере всі поля з таблиці firma, відсортує їх по 'name', але не попорядку а навпаки і візьме до уваги тільки 2 строки.
30. INSERT - Вставка інформації в БД. // mysql_query( "INSERT INTO table (поле1, поле2) VALUES('значення1','значення2')";
31. UPDATE - обновити інформацію в базі даних // mysql_query ("UPDATE firma SET name='Егор', lastname='Егоров' WHERE id='1'");
32. DELETE - видалити інформацію в базі даних mysql_query ("DELETE FROM firma WHERE id='4'");
33. У таблицю БД ткст копіювати разом з тегами.