
Magento 2 так само як і м1, використовує ActiveRecord

 ------------------ Magento 2 and the Less CSS Preprocessor - https://alanstorm.com/magento_2_less_css/ -------------------------------

 1) System -> Stores -> Configuration -> Advanced -> Developer -> Front-end Developer Workflow  - Тут указується чи компілювати less на сервері

 2) <css src="Pulsestorm_StartingWithLess::red-alert.css"/> - якщо замість red-alert.css буде red-alert.less, маджента його перекомпілює на сервері і покладе в статику css файл. і в статиці буде вже файл а не сімлінк

 3) Якщо я зміню лес файл, то маджента не буде перегенеровувати css. Щоб перегенерувати css з новими змінами, треба

	- видалити css - rm pub/static/frontend/Magento/luma/en_US/Pulsestorm_StartingWithLess/red-alert.css

	- Вам также необходимо очистить папку view_preprocessed от Magento. Это папка кеша для исходных файлов less

 ----------------------- Magento 2: CRUD Models for Database Access - https://alanstorm.com/magento_2_crud_models_for_database_access/ -------------------------

 - https://inchoo.net/magento-2/setup-scripts-magento-2/ - Тут є потрібна інфа 

 1) Setup/InstallSchema.php - тут я буду створювати таблиці в базі. 

	- Файл InstallSchema.php предназначен для хранения кода для создания структуры таблиц вашей базы данных.

	- Если модуль устанавливается, выполняется Setup \ InstallSchema :: install ().

	- Файл InstallData.php використовується щоб оновити схему ( InstallSchema.php). Зазвичай дадавання якихось атрибутів продукту або щось типу того. В доці мадженти https://devdocs.magento.com/videos/fundamentals/add-a-new-table-to-database/ - це так пояснюється - Setup/InstallSchema.php - тут створюю таблицю - InstallData.php - тут її заповнюю.

 2) три столбца в любой таблице (creation_time, update_time и is_active) - это поля, которые Magento ожидает найти в модели. Хотя эти поля в ваших моделях не обязательны, это всегда хорошая идея.

	- Кароче краще подивити дефолтны таблиці мадженти

 3) vendor/magento/framework/DB/Ddl/Table.php - тут всі типи даних полів БД. По правильному їх так і треба вказувати - \Magento\Framework\DB\Ddl\Table::TYPE_TEXT

 4) setup: upgrade добавити ці поля в базу

	- В Magento 1 системный код ядра автоматически выполнял любые необходимые миграции всякий раз, когда был сделан некэшированный запрос HTTP (S). 

 5) У першій мадженті я всі конфіги для роботи з базоб писав у файлі конфігів. І по них понятно було куди я підключаюсь і які папки створювати. У м2 схожа структура але в конфігах нічого не треба прописувати. Тому якщо мені шось не понятно, можна глянути на опис модельки в м1

 6) setup_module - У цій таблиці є всі модулі і їхні версії (shrema_version data_version). Тут так само як в першій 

-----------------------

- ці пункти я скопіював з м1

	- Якщо при setup:upgrade, маджента побачить що у мене є установлений модуль і його не має у цій таблиці, маджента запустить інстал скріпти і добавить модуль у цю таблицю. Типу схоже на просте добавлення нового модуля але при цьому іще і інстал скріпти спрацьовують

			- Если вы хотите перезапустить сценарий инсталлятора (полезно в процессе разработки), просто удалите строку для нужного модуля из этой таблицы. DELETE from setup_module where module = 'weblog_setup';

			- Коли я робив цей урок, то у мене був модуль з великою версією. Я видалив його з бази DELETE from setup_module where module = 'weblog_setup'; поставив 0 1 0 і не було помилки
	
---------------------------------

 7) Как и Magento 1, все модели Magento CRUD расширяют базовый класс абстрактных моделей -Magento\Framework\Model\AbstractModel

	- В отличие от Magento 1, все модели CRUD также реализуют интерфейс IdentityInterface. Этот интерфейс вынуждает разработчиков моделей определять метод getIdentities

	- Також я створив інтерфейс для своєї моделі - app/code/Pulsestorm/ToDoCrud/Model/TodoItemInterface.php

		- TodoItemInterface играет важную роль, когда приходит время экспортировать модели CRUD в новый API на основе контрактов на обслуживание Magento. По ходу тут будуть описані методи Апішки

	- #File: app/code/Pulsestorm/ToDoCrud/Model/TodoItem.php - ось основна моделька. В принципі тут все як м1

		- її метод _construct будет вызываться всякий раз, когда создается экземпляр модели. 

		- Каждая модель CRUD в Magento должна использовать метод _construct для вызова метода _init. Метод _init принимает один строковый параметр - имя модели ресурсов этой модели.

 
 8) Модель ресурсов Magento 2 - те саме шо в м1

	- В Magento 2 класс модели определяет методы, которые программист конечного пользователя будет использовать для взаимодействия с данными модели.

	- Класс модели ресурсов содержит методы, которые фактически извлекают информацию из базы данных. Каждая модель CRUD в Magento 2 имеет соответствующий класс модели ресурсов.

	- Каждый класс модели ресурсов CRUD расширяет класс - Magento\Framework\Model\ResourceModel\Db\AbstractDb - Этот базовый класс содержит базовую логику для извлечения информации из одной таблицы базы данных.

	- protected function _construct() { $this->_init('pulsestorm_todocrud_todoitem','pulsestorm_todocrud_todoitem_id'); } - те саме що в м1 

 9) Модель из коллекции Magento 2 - когда вам нужно выбрать несколько моделей (ресурсов) определенного типа

	- Он считается моделью ресурсов, поскольку он создает код SQL, необходимый для извлечения информации из таблицы базы данных.

	- Все коллекции в Magento 2 расширяют базовый класс коллекций - \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection

	- Метод _init модели ресурсов коллекции принимает два аргумента. Первая - это модель, которую собирает эта коллекция. Второе - это модель ресурсов, собранная этой моделью.

 10)  В Magento 2 каждая модель CRUD имеет соответствующий factory класс.
	
	- Все имена классов фабрики - это название класса модели, к которому добавлено слово - Factory

	- Всякий раз, когда менеджер объектов Magento встречает имя класса, оканчивающееся на слово Factory, он автоматически генерирует класс в папке generated, если класс еще не существует - http://joxi.ru/zANzVoLivvbqDA

	- Итак, поскольку наш модельный класс назван Pulsestorm/ToDoCrud/Model/TodoItem - это означает, что наш фабричный класс будет назван Pulsestorm/ToDoCrud/Model/TodoItemFactory

		- \Pulsestorm\ToDoCrud\Model\TodoItemFactory $toDoFactory - це я писав в конструкторі блока \Pulsestorm\ToDoCrud\Model\TodoItemFactory $toDoFactory, де я працював з базою через цю модельку

	- Тобто це і досі клас Pulsestorm/ToDoCrud/Model/TodoItemFactory - це ще не обєкт. get_class($this->toDoFactory) - string 'Pulsestorm\ToDoCrud\Model\TodoItemFactory' 

		protected $toDoFactory;
		public function __construct( \Magento\Framework\View\Element\Template\Context $context, \Pulsestorm\ToDoCrud\Model\TodoItemFactory $toDoFactory )
		{
		$this->toDoFactory = $toDoFactory; parent::__construct($context);}

			- $toDoFactory->create(); - це вже обєкт

				$todo = $this->toDoFactory->create();
				$todo->setData('item_text','Finish my Magento article') - Затем мы устанавливаем свойство item_text нашей модели (вже обєкту Factory)
				->save(); -  и вызываем его метод сохранения. В таблицю добавилось. Тобто схоже на м1

					$todo = $todo->load(1);
        				var_dump($todo->getData());

						// магічні методи
						 var_dump($todo->getItemText());
    						var_dump($todo->getData('item_text'));

 11) CRUD model’s collection object. Те саме, що і для звичйної, тільки діставати їх буду так

	$todo = $this->toDoFactory->create();

	$collection = $todo->getCollection();

	foreach($collection as $item)
	{
	var_dump('Item ID: ' . $item->getId());
	var_dump($item->getData());
	}
	

 ------------------------------ Magento 2: Understanding Object Repositories - https://alanstorm.com/magento_2_understanding_object_repositories/ ------------------------------

 - паттерн Repositories.

	- Наприклад в мене є якиїсь клас, який має доступ до даних (наприклад до бази, до файлової системи, кароче до всього що можна уявити). 

	- Клас репозиторій має мати можливість працювати з цими істочниками даних (міняти, вибирати, удаляти, ...). Щоб не йти далеко від сущності, строюється не клас а інтерфейс у якому є основні методи для роботи з цим істочником клас репозиторія буде імплементувати цей інтерфейс

-----------
 
  - На скільки я зрозумів суть паттерна репозиторі у тому, щоб через цей клас репозиторі можна було працювати з даними звідки захочу. Тобто з апішки, ще з якоїсь балди. Тож це не то що не правильно використовувати репозиторі у блоках наприклад, просто навряд розробники мадженти або я буду створювати функціонал для роботи з цими даними настільки багатий як через звичайні класи. Є сенс використовувати репозиторі у випадках коли я пишу якиїсь модуль і до мого модуля хтось буде стукатись апішкою.

	- Плюс, якщо робота зі звичайними класами має бути проста (не треба паритись що я посилаю через метод, або які типи даних я получаю), то робота з рипозиторієм має бути вдвічі легша. Простенькі, понятні методи, щоб були понятні кожному 

		- Чим абстракніший клас репозиторі, тим краще. Для хорошого прикладу можна привести PDO - коли не вжливо що це за база. Є 1 метод для роботи з базою і не важливо з якою базою я буду працювати я як у цій базі витягуються дані. У пдо є свій метод і все - він всім підходить

	- Може краще зрозумію якщо подивлю на клас репозиторі. Як він витягує колекцію продуктів

		public function __construct(
		    //...
		    \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $collectionFactory, - Тобто репозиторі абстракція. А по суті коли я працюю з продуктами через репозиторі, я процюю з Magento\Catalog\Model\ResourceModel\Product\CollectionFactory. З цього можна зрозуміти, що якщо захочу працювати з продуктами, можна буде це робити через Magento\Catalog\Model\ResourceModel\Product\CollectionFactory

			- + цей ResourceModel це взагалі атавізм з першої мадженти. Це не я так вирішив це Алан каже. Це вроді не всі продуктові модельки працюють через \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory. Наскільки я зрозумів це відноситьься до беспосередньо цього класу і до репозеторі, який має цей клас в залежностях депенденсі.

		) {
		    $this->collectionFactory = $collectionFactory;
		}

		public function getList(\Magento\Framework\Api\SearchCriteriaInterface $searchCriteria)
		{
		    /** @var \Magento\Catalog\Model\ResourceModel\Product\Collection $collection */
		    $collection = $this->collectionFactory->create();
		    //...
		}

 ------------------------

 - Кароче у цьому уроці я працював з командною строкою. В пхп файлах я писав логіку. В залежності від команд які буду вводити, командна строка буде виводити різне

	- умовно я ввів php bin/magento ps:examples і виконався код 

		$repo = $this->objectManager->get('Magento\Catalog\Model\ProductRepository');
		$page = $repo->getById(2);
		echo get_class($page),"\n"; - це вивелось в командній строці
 
 ( API на основе RESTful с аутентификацией oAuth )

 2) Тут Алан розказував про паттерн Repositoriy. Він каже що він використовується всюди - product, category, CMS page, etc - для кожного з них є репозиторі обєкт. І кожен з них імплементує свій інтерфейс

	Щоб було ясніше, по проектах я бачив такі класи - Magento\Cms\Model\PageRepository - за них я і буду розказувати.

	- Почну я з cms/page objects - Magento\Cms\Model\PageRepository - це репозиторі обєкт для цмс пейдж обєктів.

 3) Скажу зразу. Це не фекторі і не проксі. Не має такого що є клас Magento\Cms\Model\Page і в папку generated добавиться клас Magento\Cms\Model\PageRepository. Клас Magento\Cms\Model\PageRepository існує фізично.

 4) Якщо заглянути у клас Magento\Cms\Model\PageRepository, можна побачити що він імплементує інтерфейс PageRepositoryInterface по методах якого можна буде зрозуміти, що буде робити репозиторі обєкт - save(), getById(), getList(), delete(), deleteById()

	- Та і в ідеалі не має бути важливо з чим я працюю, чи з цмс пейджами чи з продуктами, методи для взяття інфи мали б бути одинакові.

 5) Тож репозиторій - це простий спосіб працювати з якимось даними. Далі я буду описувати як маджента працює з даними через репозиторі

 - Наприклад так я витягаю цмс пейджу 

	$repo = $this->objectManager->get('Magento\Catalog\Model\ProductRepository');
        $page = $repo->getById(2);

 - міняю тайтл в цмс пейджі

	$repo = $this->objectManager->get('Magento\Cms\Model\PageRepository');
        $page = $repo->getById(2);
        echo $page->getTitle(),"\n";
        $page->setTitle($page->getTitle() . ', Edited by code!');
        $repo->save($page); - тобто ці дані попадуть в базу

 - Если вы хотите дублировать страницу, вы можете загрузить дубликат страницы, установить для ее идентификатора значение NULL и передать дублированный объект в репозиторі.

	- Я перевіряв, воно справді зробить дублікат, а не видалить сторінку з бази

	$repo = $this->objectManager->get('Magento\Cms\Model\PageRepository');
	$page = $repo->getById(2);
	$page->setId(null);
	$page->setTitle('My Duplicated Page');
	$repo->save($page);                
	echo $page->getId(),"\n";

 - Видалити сторінку можна двома методами. Або передати репозиторі айдішку, або всю сторінку

	$repo->delete($page);
	$repo->deleteById($page_id);

 6) Далі буде йти мова про продуктовий репозиторій - Magento\Catalog\Model\ProductRepository. Наприклад тепер вже буде буде ясно де шукати чому тут буде помилка

	$repo = $this->objectManager->get('Magento\Catalog\Model\ProductRepository');        
	$repo->getList(); - Argument 1 passed to Magento\Catalog\Model\ProductRepository\Interceptor::g etList() must implement interface Magento\Framework\Api\SearchCriteriaInter face, none given

		- У інтерфейсі є метод getList(\Magento\Framework\Api\SearchCriteriaInterface $searchCriteria); і він требує щоб йому передали обєкт критерії пошуку.

	- Так вже заработає

		$repo = $this->objectManager->get('Magento\Catalog\Model\ProductRepository');        
		$search_criteria = $this->objectManager->create(
		    'Magento\Framework\Api\SearchCriteriaInterface'
		);
		$result = $repo->getList($search_criteria);
		$products = $result->getItems();
		foreach($products as $product)
		{
		    echo $product->getSku(),"\n";
		} 

 7) Search Criteria це якиїсь обєкт який вказує мо яких критеріях витягувати дані з бази. Але щоб задати фільтри, я не використовував його методи фільтрування, а передав йому аргументом обєкти фільтрування Magento\Framework\Api\Filter і Magento\Framework\Api\Search\FilterGroup. Кароче можна заглянути в код і подивити як я фільтрував дані. Я тут трохи понаписував прикладів як фільтрувати продукти по ску. А точніше по імені ску.

	- Але не думаю що ці криерії підійдуть усім репозиторіям. Скоріш за все так фільтрувати можна буде тільки продукти 

	$filter = $this->objectManager->create('Magento\Framework\Api\Filter');
        $filter->setData('field','sku');
        $filter->setData('value','WSH11%');
        $filter->setData('condition_type','like');

		- За ці критерії пошуку мабуть краще подивити у самому класі, але також щоб убідитись у їх валідності, можна заглянути у цей інтерфейс - vendor/magento/framework/Api/CriteriaInterface.php - Тут є константи для цих - fields filters orders

	$filter_group = $this->objectManager->create('Magento\Framework\Api\Search\FilterGroup'); - Я не дуже поняв що це за групи фільтрів і навіщо ця прослойка між фільтром і критерією пошуку
        $filter_group->setData('filters', [$filter]);

	$search_criteria = $this->objectManager->create('Magento\Framework\Api\SearchCriteriaInterface');
        $search_criteria->setFilterGroups([$filter_group]);

	$repo = $this->objectManager->get('Magento\Catalog\Model\ProductRepository');
        $result = $repo->getList($search_criteria);
        $products = $result->getItems();

 - Але коли є не важкі запити, builder дозволяє писати їх скорочено. Тобто не треба буде створювати філтр, потім групу фільтрів і додавати їх в серч критері білдер

	$search_criteria = $this->objectManager
	->create('Magento\Framework\Api\SearchCriteriaBuilder')
	->addFilter('sku','WSH11-28%Blue', 'like')
	->create();

	- Мабуть десь внутрі і є написано що цей простенький запит в 3 строчки, насправді те саме що вверхні довгі запити, але то вже таке. 

 ВАЖЛИВО. У своєму коді я створював декілька фільтрів('Magento\Framework\Api\Filter') і декілька груп фільтрів('Magento\Framework\Api\Search\FilterGroup'); Вроді я це писав у коді, але коли обєднувати фільтри і додавати їх в групи фільтрів - це буде or, а якщо обєднувати групи фільтрів - це буде AND. Тобто створюю фільтр

	$filter = $this->objectManager->create('Magento\Framework\Api\Filter');
        $filter->setData('field','sku');
        $filter->setData('value','WSH11%');
        $filter->setData('condition_type','like');

	Потім створюю ще 1

	$filter2 = $this->objectManager->create('Magento\Framework\Api\Filter');
        $filter2->setData('field','sku');
        $filter2->setData('value','WSH11%');
        $filter2->setData('condition_type','like');

	і добавляю його в групу фільтрів 

	$filter_group = $this->objectManager->create('Magento\Framework\Api\Search\FilterGroup');
        $filter_group->setData('filters', [$filter, $filter2]);

		- Потім цей $filter_group додасться в серч критерію

		- Цей запит буде виглядати як - WHERE sku LIKE 'WSH11-28%Blue' OR sku = 'WSH11-28%Red'

	А ЯКЩО ЯКЩО Я ДОДАМ ЩЕ ОДНУ ГРУПУ ФІЛЬТРІВ ЯК ЦЮ ТО ЦЕ ВЖЕ БУДЕ ВИГЛЯДАТИ ЯК AND - кароче, треба глянути у код, я це там розписав 

-------------------------------

 Суть у тому що Алан каже що це тільки для продуктів я ця фішка з фільтрами. Але якщо так, то то що я писав що має бути 1 рівень абстракції для роботи і для цмс блоків і для продуктів - вже не дійсне, принаймні з фільтрами

 Якщо глянути у цей файл - vendor/magento/module-catalog/Model/ProductRepository.php , можна подивити як реалізовані фільтри при діставанні продуктів. Тобто метод називається getList() так як і для цмс-пейджів, але із за того що реалізація діставання продуктів і сторінок дуже різна, повну абстракцію (навіть з фільтрами не вдалось реалізувати).

------------------------------

------------

 - Можливо краще можна буде зрозуміти, якщо подивити як подібний функціонал реалізований на м1

	$items = Mage::getModel('catalog/product')
	->getCollection()
	->addFieldToFilter('sku',['like'=>'WSH11-28%Blue']);    

	foreach($items ...){}
 

---------------------


	- Кароче це я витягнув з бази продукти, ску яких починається з WSH11. Якщо цей варіант фільтрування мені не подобається, можна вибрати інший(Builder) - вони еквівалентні.

	//create our filter
	$filter = $this->objectManager
	->create('Magento\Framework\Api\FilterBuilder')
	->setField('sku')
	->setConditionType('like')
	->setValue('WSH11%')
	->create();

	//add our filter(s) to a group
	$filter_group = $this->objectManager
	->create('Magento\Framework\Api\Search\FilterGroupBuilder')
	->addFilter($filter)
	->create();
	// $filter_group->setData('filters', [$filter]);

	//add the group(s) to the search criteria object
	$search_criteria = $this->objectManager
	->create('Magento\Framework\Api\SearchCriteriaBuilder')
	->setFilterGroups([$filter_group])
	->create();


 - І вкінці - ось як треба правильно работати з ними через депенденсі, а не так як я в своїх прикладах через обєкт менеджер

	<?php
	namespace Pulsestorm\RepositoryTutorial\Model;
	/**
	* Example of automatic constructor dependency injection
	* for repository and filter objects
	*/
	class Helper
	{
	    protected $pageRepository;
	    protected $productRepository;
	    protected $filterBuilder;
	    protected $filterGroupBuilder;
	    protected $searchCriteriaBuilder;

	    public function __construct(
		\Magento\Cms\Model\PageRepository $pageRepository, 
		\Magento\Catalog\Model\ProductRepository $productRepository,
		\Magento\Framework\Api\FilterBuilder $filterBuilder,
		\Magento\Framework\Api\Search\FilterGroupBuilder $filterGroupBuilder,
		\Magento\Framework\Api\SearchCriteriaBuilder $searchCriteriaBuilder    
	    )
	    {
		$this->pageRepository           = $pageRepository;
		$this->productRepository        = $productRepository;
		$this->filterBuilder            = $filterBuilder;
		$this->filterGroupBuilder       = $filterGroupBuilder;
		$this->searchCriteriaBuilder    = $searchCriteriaBuilder;
	    }
	}



 --------------------- Magento 2: Understanding Access Control List Rules - https://alanstorm.com/magento_2_understanding_access_control_list_rules/ --------------------------------

 1) ACL - Владелец может иметь для себя внутреннюю учетную запись, но также предоставлять каждому члену своего персонала доступ к Бэкэнд Magento -  System -> Users and Systems -> Roles sections

	- Некоторыми примерами ролей могут быть отдел продаж, персонал поддержки, ИТ-персонал, разработчики контрактов, исполнительная группа и т. Д. Типу кожному відділу можна дати права на якиїсь розділ в мадженті. Тобто у кожного відділа буде різний логін пароль і від цього буде залежати куди вони будуть мати доступи

 2) Коли я роблю новий модуль в адмінці - есть несколько мест, где вы, как разработчик модуля, должны добавить проверки правил ACL в свой модуль

	- Каждая конечная endpoint/controller URL-адреса в приложении администратора должна реализовывать метод _isAllowed, который определяет, может ли пользователь получить доступ к конечной точке URL-адреса. $auth = $object_manger->get('Magento\Framework\AuthorizationInterface'); if($auth->isAllowed('Magento_GoogleAnalytics::google')

		- Если вы используете контроллер, расширяющий контроллер - \Magento\Backend\App\Action - вы автоматически получаете доступ к объекту проверки авторизации через свойство _authorization.

			- $this->_authorization->isAllowed('Pulsestorm_HelloAdmin::pulsestorm_helloadmin_index_index');

			- Також треба буде добавити Magento\Backend\App\Action\Context в конструктор. В этом объекте контекста создается экземпляр объекта проверки подлинности, который сам внедряется.

			- Якщо будуть проблеми з Magento\Framework\AuthorizationInterface, треба буде спробувати через Magento\Framework\Authorization

 3) etc/acl.xml - тут прописуються acl доступи

 4) Для прикладу візьму google аналітик - <resource id="Magento_GoogleAnalytics::google" title="Google API" /> - Magento_GoogleAnalytics::google - Это идентификатор, который вы будете использовать, чтобы проверить, имеет ли авторизованный пользователь доступ к этому ресурсу.

	- цей ідентификатор - проізвольний. Але треба притримуватись стандартів. імя модуля - Magento_GoogleAnalytics, потім ::, потім строка(lower case), описывающая цель правила - google

 5) vendor/magento/framework/Acl/etc/acl.xsd - acl.xsd для acl файлів

 6) <acl>
        <resources>
            <resource id="Magento_Backend::admin">
                <resource id="Pulsestorm_AclExample::top" title="Pulse Storm ACL Example Module"> - http://joxi.ru/MAjElawujxYeR2
                    <resource id="Pulsestorm_AclExample::config" title="The First Rule"/>
                    <resource id="Pulsestorm_AclExample::more_rules" title="The Second Rule"/>
                </resource>

 7) Якщо брати аналогію з м1, то там я описував вкладку <helloworld_options> в system.xml і давав acl доступ в файлі config.xml

 8) У м1 для acl прописувалась повна іерархія до вкладки, якій треба доступ. У м2, вказується тільки ідентифікатор - Magento_GoogleAnalytics::google - по ньому можна здогадатись що це за модуль, але де ця іерархія вже треба шукати

 9) Кароче, до цієї айдішки Magento_GoogleAnalytics::google привязується функціонал. Який функціонал, треба вже шукати цю айдішку по проекту.

 10) protected function _isAllowed(){ - цей метод теж треба у адмінському екшні. 
        return $this->_authorization->isAllowed('Pulsestorm_HelloAdminBackend::menu_1'); } - Если _isAllowed возвращает true, то пользователь разрешен. Если нет, они получат экран отказа в доступе.

		- Але якщо це суперкористувач, то цей метод проігнорується











