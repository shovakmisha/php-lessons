
 ------------------------------ Magento 2 Object Manager: Instance Objects - https://alanstorm.com/magento_2_object_manager_instance_objects/ ---------------------------------

 1) Я вже писав про те що у обєкт менеджера є 2 методи щоб створити обєкт

	$object  = $manager->create('Pulsestorm\TutorialInstanceObjects\Model\Example');
	$object  = $manager->get('Pulsestorm\TutorialInstanceObjects\Model\Example');

	- Але як маджента вирішує який метод використовувати, коли ці класи є в деперденсі (в конструкторі) і їх треба ініціалізовувати

		use Pulsestorm\TutorialInstanceObjects\Model\Example;
		
		public function __construct(Example $example)
		{
		    //is $example created with `get` or `create`?
		    $this->example = $example?
		}

		- ПО ЗАМОВЧУВАННЮ ВСІ ОБЄКТИ ЯКІ СТВОРЮЮТЬСЯ В ДЕПЕНДЕНСІ - СІНГЛТОНИ ( $ОbjectManager->get('some class') )

		- Якщо я хочу щоб це був не сінглтон, а новий інстанс ( $ОbjectManager->create('some class') ) - мені треба це вказати у файлі di.xml

			<config>
			    <type name="Pulsestorm\TutorialInstanceObjects\Model\Example" - name має бути таким як і клас, з якого я хочу створювати обєкт.
				  shared="false"> - Можна глянути на попередній урок про Proxy. Там теж використовувався "shared" щоб взнати що створювати чи сінглтон чи звичайний новий обєкт. Якщо false, значить створиться новий обєкт (create) 

				<!-- ... arguments/argument tags here if you want to change injected arguments - Тут можна добавити аргументи, щоб кастомізувати обєкт -->
			    </type>
			</config>

 2) Наскільки я зрозумів, цей shared передається завжди. Тобто якщо я його не передаю його, вын сверівно передається як тру і створиться сінглтон 

 3) Я це і так поняв, що коли я ініціалізовую обєкти не через депенденсі, то їх не можна кастомізовувати файлом di.xml і ця фішка з shared не буде звичайно работати.

 4) Коли використовується метод get для створення обєкта, ці всі обєкти складуються в _sharedInstances. Тут 

	#File: lib/internal/Magento/Framework/ObjectManager/ObjectManager.php

	public function get($type)
	{
	    $type = ltrim($type, '\\');
	    $type = $this->_config->getPreference($type);
	    if (!isset($this->_sharedInstances[$type])) {
		$this->_sharedInstances[$type] = $this->_factory->create($type);
	    }
	    return $this->_sharedInstances[$type];
	}

	- Алан про це нічого не казав і це тільки мої догадки, але по ходу всі сінглтони маджента буде хранити тут http://joxi.ru/Dr8RE7kCoD1DJ2 і щоб їх взяти - залізе у цей скріпт if (!isset($this->_sharedInstances[$type])) { - тут вже буде сінглтон і його і поверне і не буде створювати новий - $this->_sharedInstances[$type] = $this->_factory->create($type);

 5) Але ця фішка з shared теж не ідеальна. Наприклад я добавив ініціалізацію не сінглтона в депенденсі сінглтона. То цей сінглтон всеодно один раз створиться і все. Получається додавати йому в депенденсі не сінглтон не має сенсу.

	- Особливо це проблема кои я працюю з продуктами, базою, цмс пейджами

	- Звісно я можу створити старим добрим $product = new \Magento\Cms\Model\Page; Але тоді в мене не буде фішок які дає обєкт менеджер. ДЛЯ ЦЬОГО ПРИДУМАЛИ ФАБРИЧНІ ОБЄКТИ

 6) Фабрика

	 class Testbed extends Command {
	   protected $pageFactory;

	   public function __construct(\Magento\Cms\Model\PageFactory $pageFactory ) - 
	   {
	       $this->pageFactory = $pageFactory;
	       parent::__construct();
	   }

	- $page = $this->pageFactory->create(); - Потім з цього факторі обєкту я створюю цмс пейдж обєкт, використовуючи метод create(). Метод create() це факторівський метод.

		- Це саме що коли в м1 - $page = Mage::getModel('cms/page');

		 - $page автоматом буде мати CRUD методи load, getData, getCollection, etc. Я не знаю як саме воно звязує ці методи з фабрикою, але наскільки памятаю в мене були помилки, якщо я не створював ці класи модельки для звязку з базою.

 7) Кожного разу коли код бачить клас, який закінчується на Factory і автолоадер не може загрузити цей клас (він генерується у папку generated) - цей файл перегенеровується у папку generated

 8) Як я поняв що факторі із за того використовується, коли я не хочу щоб були сінглтони. Тобто для елементів, які мають дані які постійно оновлюються (продукти, цмс пейджі, цмс блоки)

	- Типу сынглтон створився 1 раз ы кожного разу коли мены треба цей обєкт маджента перевіряє а він вже є? якщо є то вже не буде створювати і генерити цей файл. А з фабрикою не так. Кожного разу, коли я буду просити фабрику, буде переініціалізовуватись обєкт, і перегинерюватись 



 --------------------- Magento 2 Object Manager Plugin System - https://alanstorm.com/magento_2_object_manager_plugin_system/ -------------------------------
 
 - Плагіни - це частина паттерна interceptor(перехватчик).

	- Великий плюс, що коли я міняв клас плагіна, не треба було чистити кеші, перегенеровувати класи - файлик автоматом перегенеровувався.

 1) Імя плагіна має бути таке як назва класу + унікальне - name="pulsestorm_tutorial_plugin_model_example_plugin"

	- По ходу внутрі плагіна теж можна писати теги і доконфігуровавати клас, але цього не було в прикладі


 2) Клас має називатись Plugin, хоча запрацює з будь якою назвою

 3) SortOrder - це порядок виконання коли на 1 клас э декылька плагінів.

 4) disabled - не факт що цей атрибут буде работати

 5) <type name="Pulsestorm\TutorialPlugin\Model\Example"> <plugin name="pulsestorm_tutorial_plugin_model_example_plugin" type="Pulsestorm\TutorialPlugin\Model\Example\Plugin"

	- Кароче я написав плагін. Клас Example, який я плагіную, кинутий в депенденсі public function __construct(Example $example)
													$this->example = $example; 

	. Із за того що він в депенденсі, його і можна плагінувати в файлі di.xml. Але коли я беру його клас - get_class($this->example) - то це не буде ні оригінальний клас ні клас плагіна. Це буде -  Pulsestorm\TutorialPlugin\Model\Example\Interceptor - Цей клас генерить маджента автоматом в папку generated. В ньому вже є методи класа, який я плагіную.

	- Але не дивлячись на то що в цього згенерованого класу є всі методи, метод який виконався не береться з нього, а береться з класу який я плагіную.

	Алан каже що не треба паритись над класом Pulsestorm\TutorialPlugin\Model\Example\Interceptor, так як це тільки прослойка яка автоматом генерується

 6) class Interceptor extends \Pulsestorm\TutorialPlugin\Model\Example implements \Magento\Framework\Interception\InterceptorInterface - це зненерований клас

	public function getMessage($thing = 'World', $should_lc = false) - це клас який він переробив з огригінального
	    {
		$pluginInfo = $this->pluginList->getNext($this->subjectType, 'getMessage');
		if (!$pluginInfo) {
		    return parent::getMessage($thing, $should_lc);
		} else {
		    return $this->___callPlugins('getMessage', func_get_args(), $pluginInfo);
		}
	    }

	- Це оригінальний клас

	public function getMessage($thing='World', $should_lc=false) {
		echo "Calling the real " . __METHOD__, "\n";
		$string = 'Hello ' . $thing . '!';
		if($should_lc)         {
		    $string = strToLower($string);
		}
		return $string; 
	}

 

 7) Афтер плагін - public function afterGetMessage($subject, $result) - приймаэ 2 аргументи
	
	- $subject (обєкт який викликав цей метод (Pulsestorm\TutorialPlugin\Model\Example\Interceptor))

-----------------------
		- Кароче якщо $subject викликає цей метод, то це не дивно що протектед методи не можна плагінити. Протектед методи можна визивати у чайлдах обєкта, а тут получається, що метод викликає цей обєкт - Pulsestorm\TutorialPlugin\Model\Example\Interceptor - а він не чайлд \Pulsestorm\TutorialPlugin\Model\Example. Це для всіх плагінів, не тільки для Афтер

			- Може є якась можливість переробити цей протектед метод в файлі di.xml. Звісно ж проще просто переписати клас у якому цей протектед метод, але можна буде загуглити.
-----------------------
	- $result (то що повертає оригінальний метод getMessage())

 8) Бефоре плагін - public function beforeGetMessage($subject, $thing='World', $should_lc=false)
	
	- Змінної $result як в афтер плагіна тут не має, так як на момент виконання бефор плагіна, основний плагін ще не почав виконуватись

	- $subject - це так само як і в афтер плагіна. 

	- Інші аргументи це копії аргументів оригінального метода - їхня назва і дефолтні значення - має бути такі самі

	Наприкдад є такий плагін

	public function beforeGetMessage($subject, $thing='World', $should_lc=false) - Це я тіьки переписав дефолнті значення. Якщо при виклику оригінального метода, я вкажу ці аргументи, то вони перекриють і аргументи цього плагіна і аргументи оригінального метода. Але то що я написав їх тут ще нічого не означає.
	    {
		echo "Calling " . __METHOD__,"\n";

		// return ['Changing the argument', $should_lc]; - щоб переписати агрументи, які передаються плагіну, треба повернути їх як тут. Тоді це перепише навіть аргументи, які я передав при виклику метода. З цими агрументи буде виконуватись оригінальний метод 
	    }

 9) Мабуть краще пояснити як работає ераунд плагі, як показати приклад - не можна

	public function aroundGetMessage($subject, $procede, $thing='World', $should_lc=false)
	    {
		echo 'Calling' . __METHOD__ . ' -- before',"\n"; - код виконається перед виконанням оригінального методу

		$result = $procede(); - Це виконання оригінального методу. Це анонімна ф-ція (Closure - https://php.net/manual/en/functions.anonymous.php)

		echo 'Calling' . __METHOD__ . ' -- after',"\n"; - код виконається після виконання оригінального методу

		return $result; - це то шо поверне оригінальний метод. Якщо тут напишу '', поверне ''.
	    }

	- По суті це і бефор і афтер плагін одночасно + оригінальний метод можна взагалі не викликати. Тобто він заміниться на цей плагін у якому я не викличу оригінальний.

		- Але з цим треба бути дуже осторожним, так як якщо я не викличу $procede(); то і прирветься ципочка всіх виконаних плагінів на цьому методі. 
	
 10) В принципі цей ераунд плагін можна розглядати як 

	class Namespace_Module_Model_Someclass extends Mage_Core_Model_Someclass

	public function someMethod($foo, $baz, $bar)
	{
	    $this->_doSomeBeforeStuff($foo, $baz, $bar);
	    $result = parent::someMethod($foo, $baz, $bar);
	    $result = $this->_doSomeAfterStuff($result);
	    return $result;        
	}

	- Але найбільше розлічіє між плагіном і цим реврайтом у тому що плагіни дозволяють робити декілька плагінів на 1 метод (і використовувати сорт ордери щоб ).

 11) Коли я роблю 2 плагіни на 1 метод - ретурн работає тільки в останнього (в нього сорт ордер більший)

	 - Але ретурн у першого плагіна не безполезний. Він якраз і передається другому плагіну. Тож другий планін подулить не то що повертає оригінальний метод, а то що повертає перший плагін









