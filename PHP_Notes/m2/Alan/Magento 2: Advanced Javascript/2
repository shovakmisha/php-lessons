

 --------------------------- The Curious Case of Magento 2 Mixins - https://alanstorm.com/the-curious-case-of-magento-2-mixins/ ----------------------------------------------

 - Mixins - не является частью стандартного RequireJS - це маджентівська приблуда

class A
{
    public function foo()
    {
    }
}

class B
{
    public function bar()
    {
    }
}

class C
{
    mixin A;
    mixin B;

    public function baz()
    {
    }
}
$object = new C;

 Обратите внимание, что классы не наследуются друг от друга. Вместо этого программист указывает, что класс C должен получать методы из класса A и класса B.


requirejs-config.js

	var config = {
	    'config':{
		'mixins': {
		    'Magento_Customer/js/view/customer': {
		        'Pulsestorm_RequireJsRewrite/hook':true
		    }
		}
	    }
	};

app/code/Pulsestorm/RequireJsRewrite/view/base/web/hook.js

	define([], function(){
	    'use strict';
	    console.log("Called this Hook.");
	    return function(targetModule){
		targetModule.crazyPropertyAddedHere = 'yes'; - це я добавив нове свойство у мagento_Customer/js/view/customer (module = requirejs('Magento_Customer/js/view/customer');
																> console.log(module.crazyPropertyAddedHere) - "yes" )

		return targetModule;
	    };
	});

 2) При роботі з міксінами можна використати mage/utils/wrapper модуль. Це схоже на aroundPlugin в пхп

	Смысл модуля-обертки заключается в том, чтобы обернуть существующий вызов функции новым кодом без необходимости редактировать исходную функцию.

	var example = {};
	example.foo = function (){
	    console.log("Called foo");
	}

	var wrapper = requirejs('mage/utils/wrapper');

	var wrappedFunction = wrapper.wrap(example.foo, function(originalFunction){

		- Метод wrap принимает два аргумента. Первая - это оригинальная функция, которую вы хотите обернуть. Вторая - это функция, которую вы хотите обернуть.
     
	    console.log("Before");
	    originalFunction();
	    console.log("After");
	});

	//call wrapped function
	wrappedFunction();

		Before
		Called foo
		After

	//change method definition to use wrapped function
	example.foo = wrappedFunction;

 3) Кароче Алан ще трохи розказував про це і наводив приклади як з цим працювати. Я розписувати не буду, краще заглянути в статтю

 ------------------------- Knockout Observables for Javascript Programmers - https://alanstorm.com/knockout-observables-for-javascript-programmers/ ----------------------------------

 1) ko = requirejs('ko'); - Це можна і в консольці написати і працюавти з нокаутом. Те саме якби в require/define я б в залежностях написав ['ko']

 2) subscribe - можна підписатись на зміни елемента. Типу івент change на інпуті. 

	- ko = requirejs('ko');
	- var objectToHoldMyValue = ko.observable('default value');

	objectToHoldMyValue.subscribe(function(newValue){ - Підписуюсь на objectToHoldMyValue. Якщо там буде щось мінятись - console.log("The subscriber sees: " + newValue);
	    console.log("The subscriber sees: " + newValue);
	}); 

	- Тобто - objectToHoldMyValue('a second new value') - console.log("The subscriber sees: " + newValue);

		- Важливо - якщо я знов напишу objectToHoldMyValue('a second new value') то нічого не буде, так як значення не змінилось (тобто як івент change) - значення не змінилось тому і метод не викликався (console.log("The subscriber sees: " + newValue); )

		- Кароче можна сказати що це ідентична тема як у обсервабл інпутів. 

	- observable елемент могут иметь несколько subscribers.

		пыдписатись на обсервабл елемент можна через template’s через data-bind атрибут. 

 3) subscribe БУДЕ ПРАЦЮВАТИ НАВІТЬ ЯКЩО Я СТВОРЮ свою привязку (https://knockoutjs.com/documentation/custom-bindings.html)
		
 4) objectToHoldMyValue._subscriptions - подивити хто підписаний на мій елемент. 

	- objectToHoldMyValue._subscriptions.change[0].callback - подивити що робить підписаний елемент

 ---------------------------- Modifying a jQuery Widget in Magento 2 - https://alanstorm.com/modifying-a-jquery-widget-in-magento-2/ ----------------------------

 1) Це стаття про віджети jQuery https://learn.jquery.com/jquery-ui/widget-factory/how-to-use-the-widget-factory/ в мадженті

	- Віджети в jQuery це частина jQuery UI.

 2) jQuery.widget('ournamespace.ourPluginMethod', { // - Це віджет jQuery 


	- Когда мы вызываем jQuery.widget - мы создаем определение виджета. Это похоже на создание файла определения класса в традиционной объектной системе

    _create:function(cr){
        //widget initilization code here, widget has
        //access to things like this.options, this.element
        //to access configuration and the matched dom node

	Кароче сюди автоматом попадають дані які я передаю при ініціалізації віджета (jQuery('#the-node').ourPluginMethod({ці дані});)


    },
    hello:function(){
        console.log("Say Hello");
    }
});

	- Приведенный выше код сделает метод с именем ourPluginMethod доступным для клиентских программистов jQuery.

	- jQuery('.some-node').ourPluginMethod({/* ... initial config ...*/}); - ініціалізую цей віджет

		- Когда разработчик говорит jQuery ('. Some-node'). OurPluginMethod, это похоже на то, как разработчик создает объект с помощью файла определения класса. 


	- Але так викликати методи віджетів краще - var widgetInstasnce = jQuery('#the-node').ourPluginMethod({/* ... initial config ...*/});

							//call the `hello` method - У мого віджета є метод hello()
							widgetInstasnce.ourPluginMethod('hello')

 2) Пространство імен у віджетах

	- Коли я ствоював віджет, я писав - jQuery.widget('ournamespace.ourPluginMethod', {

		- ournamespace - Це пространство імен

		- ourPluginMethod - мій віджетовський плагін

	- console.log(jQuery.ournamespace.ourPluginMethod)

 3) Для  своїх плагінів м2 має своє пространство імен - mage. Для прикладу розгляну як створюється плагін list (він також і модуль) - lib/web/mage/list.js

									define([
									    "jquery",
									    'mage/template',
									    "jquery/ui" - це вони. Тобто це маджентівські плігіни jQuery, які загружаються як модулі (через рекваєр)

									], function($, mageTemplate){
									    "use strict";

									    $.widget('mage.list', {        /*...*/});
									    /*...*/
									    return $.mage.list;

										// jQuery['mage']['list'] == $.mage.list;
									})

 
 4) Якщо захочу його використати у своєму модулі, треба написати 

	requirejs([
	    'jquery', - теж треба
	    'mage/list' - Тобто і пространство імен теж треба вказати
	], function($, listWidget){
	    $('#some-node').list({/* ... */}); - тобто просто list, а не listWidget. Те саме як і то що я описував вверху про ініціалізацію стандартних плагінів jQuery - jQuery('#the-node').ourPluginMethod({/* ... initial config ...*/}); 

		- То що я добавив у рекваєрі 'mage/list' це я вже добавив до jQuery мій плагін. і в jQuery буде до нього доступ вже

	})

 5) Але не завжди 1 модуль == 1 віджет. Наприклад віджети Menu and Navigation знаходяться у файлі vendor/magento/magento2-base/lib/web/mage/menu.js

	$.widget('mage.navigation', $.mage.menu, { - зразу 2 віджети оприділяються за 1 раз

	 - Їх аліас теж можна переоприділити vendor/magento/module-theme/view/frontend/requirejs-config.js
	    										"menu":                   "mage/menu",

 6) Ще трохи про шляхи. Наприклад мені треба плагін календаря - 'mage/calendar'(і це робочий варіант). Логічно предположити що це модуль і його треба шукати тут lib/web/mage/calendar.js

	- Але це не так. Файл календаря дійсно можна знайти по цьому шляху, але це не модуль а анонімна ф-ція.

	- в ній оприділяються віджети і ця анонімна ф-ція повертає dateRange:  $.mage.dateRange, calendar:   $.mage.calendar . Нічого важкого, просто не маж стандартів

	- typeof define === 'function' && define.amd - Этот код проверяет наличие require.js библиотеки. 

 7) Як я писав вверху, створення це як створення класу. А використовування віджета - jQuery('#the-node').ourPluginMethod({/* ... initial config ...*/}); це як робити обєкт з цього класу

	- Але це не єдиний спосіб ініціалізувати обєкт. Маджента предлагає ще 2 способи data-mage-init, x-magento-init script

		- Це атрибути які я вже розглядував у попередніх статтях. Вони ідентичні по суті. Виявляється що вони підходять і для віджетів

			1) $('#some-node').list({/* ... config ... */});  ==  <div id="some-node" data-mage-init='{"mage/list":{/* То що я тут передав. */}}'></div>


														//File: lib/web/mage/list.js
														define([
														    "jquery",
														    'mage/template',
														    "jquery/ui"
														], function($, mageTemplate){
														    "use strict";

														    $.widget('mage.list', {        /* Передасться сюди */});
														    /*...*/
														    return $.mage.list;
														})

 8) Вопше йся уся система з data-mage-init і x-magento-init script ізначально була придумана для віджету -  <div id="some-node" data-mage-init='{"mage/list":{/* То що я тут передав. */}}'></div>

	- Якщо подивити, то віджети теж повертають шось типу return $.mage.list;

	- А потім вже переробили щоб ця система працювала і для скріптів і для вю модельок і для компонентів.

 9) Стандартні віджети jQuery це ооп. І звичайно їх можна розширяти, переоприділяти і тд. Також можна викликати батьківський віджет - _super()

	- батьківський метод можна викликати навіть якщо я його переоприділив у своєму віджеті - open: function() {
														console.log( "open" );
													 
														// Invoke the parent widget's open().
														return this._super();
													    }

		- _super() and _superApply() це аналоги call() apply() - в скріпті

	- $.widget( "custom.superDialog", $.ui.dialog, {} ); - При указании родительского виджета передайте его в качестве второго аргумента - после имени виджета и перед объектом-прототипом виджета.

		- Цей код зробить віджет custom.superDialog ідентичним $.ui.dialog, {}

 10) $.widget( "custom.superDialog", $.ui.dialog, {
	    red: function() { - Добавлю метод до мого віджета
		this.element.css( "color", "red" );
	    }
	});

	- Викликаю цей новий метод - $( "<div>I am red</div>" ).superDialog().superDialog( "red" );

		- Переоприділяти(викликати) батьківські методи теж можна

 11) ПОчинаючи з jQuery UI 1.9 переоприділяти віджети можна так $.widget( "ui.dialog", $.ui.dialog, {
								    open: function() {
									console.log( "open" );
									return this._super();
								    }
								});
								 
								$( "<div>" ).dialog();

	
 12) <ul class="dropdown switcher-dropdown" data-mage-init='{"dropdownDialog":{ - Как это работает?

	1) Magento получает модуль dropdownDialog через RequireJS - require['dropdownDialog'(це аліас - "dropdownDialog":         "mage/dropdown",)]

	2) Модуль dropdownDialog использует jQuery.widget для определения виджета. Тобто у файлі модуля оприділяється цей віджет

	3) Модуль dropdownDialog возвращает объект определения виджета. І після цього у jQuery є цей плагін на моїй сторінці

	4) Код ядра Magento, который реализует data-mage-init, использует возвращенный объект виджета для создания экземпляра виджета

		- НЕ ПОНЯВ ЦЕ АЛЕ АЛАН КАЖЕ ЩО ЯКЩО ОЮЄКТ ВЖЕ ІНІЦІАЛІЗУВАВСЯ З ВІДЖЕТА ТО ЦІ ВСІ ФІШКИ З ПЕРЕОПРИДІЛЕННЯМ ВІДЖЕТА ВЖЕ НЕ ДІЮТЬ


 13) ------ Створення міксіна на віджет --------------------

	- app/code/Pulsestorm/Logdropdown/view/base/requirejs-config.js

	var config = {
	    "config": {
		"mixins": {
		    "mage/dropdown": { - Тобто я тут пишу не аліас модуля яко мені треба міксанути а модуль (хоча у нього є аліас - 'dropdownDialog': 'mage/dropdown')
		        'Pulsestorm_Logdropdown/js/dropdown-mixin':true
		    }
		}
	    }
	};

	//File: app/code/Pulsestorm/Logdropdown/view/base/web/js/dropdown-mixin.js

	define(['jquery'], function(jQuery){
	    return function(originalWidget){ - originalWidget == mage/dropdown
		alert("Our mixin is hooked up.");
		console.log("Our mixin is hooked up");

		originalWidget.prototype.widgetName; - імя віджета

		originalWidget.prototype.namespace - неймспейс віджета

		return originalWidget;
	    };
	});

		- Або варіант з екстендом

			define(['jquery'], function(jQuery){
			    return function(originalWidget){

				jQuery.widget(
				    'mage.dropdownDialog', jQuery['mage']['dropdownDialog'],  

				    { - ПЕРЕОПРИДІЛЯЮ МЕТОД - Це цей дробдаун http://joxi.ru/EA4LvxOiopvMWA. Не тільки цей, він на багато елементів діє, але і на цей теж
					open:function(){
					    //our new code here
					    console.log("I opened a dropdown!"); - http://joxi.ru/L216bOacR0zWnA

					    //call parent open for original functionality
					    return this._super();

					}
				    });

				return jQuery['mage']['dropdownDialog']; І ПОВЕРТАЮ ЙОГО
			    };
			});

	- php bin/magento setup:upgrade - також чистить кеші

	- Как только вы это сделаете, загрузите любую страницу, которая использует виджет dropdownWidget (домашняя страница, страница каталога и т. Д.), И вы должны увидеть предупреждение и сообщение console.log о том, что наш миксин подключен.

 14) Я впевнений що можна не екстендити існуючий модуль, а створити новий на основі існуючого і приміняти його там де мені треба. Але скоріш за все це теж не ок коли у різних сторінках одинакові плагіни будуть мати різну поведінку










