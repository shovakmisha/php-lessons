


















1) Reflection - здатність програми аналізувати саму себе. Типу прооаналізувати ф-цію або ще шось
	- interface Reflector; class Reflection; Від них усі наслідуються

ReflectionFunction
	 Константы
		○ int IS_DEPRECATE
	 Свойства
		○ public $name
	 Методы
		○ abstract void __toString ( )
		○ static string export ( string $name [, string $return ] ) - типу var_dumpt але прикольніше, інформативніше. Reflection::export(...)
		○ mixed invoke ([ mixed $parameter [, mixed $... ]] ) - Викликати ф-цію. $func = new ReflectionFunction('sayHello'); $func->invoke($arg1, $arg2, ...)
		○ string __toString ( )

 - function sayHello(){...}
// Создание экземпляра класса ReflectionFunction
    $func = new ReflectionFunction('sayHello');

Свойства
	○ public $name // "sayHello"
 Методы
	○ int getStartLine ( ) - з якої строки вона починається в коді
	○ int getEndLine ( ) - у якій строці її код закінчується
	○ string getExtensionName ( ) - імя розширення у якому знаходиться ф-ція
	○ string getFileName ( ) - файл у якому ця ф-ція
	○ string getName ( ) - імя ф-ції
	○ int getNumberOfParameters ( ) - к-сть аргументів
	○ int getNumberOfRequiredParameters ( ) - к-сть обовязкових аргументів. Якщо у аргумента є значення за замовчуванням - він не обовязковий
	○ array getParameters ( ) - свойства(параметри(змінні)) які є у ф-ції. вроді ф-ції не покаже, хоча ф-ція в ф-ції це дивно
	○ array getStaticVariables ( ) - поверне статичні змінні ф-ції
	○ bool isInternal ( ) - скаже чи це встроєна ф-ція (echo,pow,is_string,...). Якщо так, то вона знаходиться у якомусь розширенні. Тут можна використати getExtensionName(), і вже має повернутись не імя розширення, а розширення, оброблене рефлекшном до якого будуть доступні усі ці ф-ції
	○ bool isUserDefined ( ) скаже чи це мною описана ф-ція
	○ ReflectionExtension getExtension ( )
	○ string getNamespaceName ( ) - неймспейс
	○ bool isClosure ( ) чи наслідується від обєкта Closure
	○ bool isDeprecated ( ) - isDeprecated?
	○ string getDocComment ( )
	○ abstract void __toString ()

----- Є ще декілька класів, які буде наслідувати фінальний обєкт, який буде обробляти ф-цію. Я опишу їх нижче. Тобто у всіх будуть цей ф-ціонал 

Я не буду записувати всі, краще загуглити
 2) ReflectionParameter - для роботи з аргументами
	Свойства
		○ public $name - імя аргумента
	 Методы
		○ bool allowsNull ( ) чи може мати значення Null. Типу якщо я написав перед аргуметом клас або тим до якого має відноситись цей аргумент, то він вже не може бути Null
		○ __construct ( string $function , string $parameter ) - Я записав це для прикладу. Спеціаліст не казав нічого по цьому поводу, але я записав щоб не забувати шо мало б бути можна перезагрузити будь який клас і дати власний функціонал
		○ ReflectionFunction getDeclaringFunction ( )
		○ mixed getDefaultValue ( ) - Якщо аргумент має дефолтне значення, то поверне
		○ string getName ( ) - імя
		○ int getPosition ( ) - який по щоту аргумент
		○ bool isArray ( ) - чи аргумент масив
		○ bool isDefaultValueAvailable ( ) - чи є дефолтне значення
		○ bool isOptional ( ) - чи він обовязковий
		○ bool isPassedByReference ( ) - чи стоїть перед ним амперсант

Класс ReflectionClass - Це вже для роботи з класом. Всі ф-ці описувати не буду, по назві понятно
 Свойства
	○ public $name
 Методы
	○ __construct ( mixed $argument )
	○ mixed getConstant ( string $name )
	○ array getConstants ( )
	○ array getDefaultProperties ( ) - поверне дефолтні свойства класа ( краще уточнити )
	○ string getDocComment ( )
	○ int getStartLine ( )
	○ int getEndLine ( )
	○ ReflectionExtension getExtension ( )
	○ string getExtensionName ( )
	○ string getFileName ( )
	○ array getInterfaceNames ( ) - масив інтерфейсів, які він реалізовує
	○ array getInterfaces ( ) - масив обєктів, які унаслідували цей клас
	○ object getMethod ( string $name імя метода який я хочу)
	○ array getMethods ( тут буде масив )
	○ string getName ( )
	○ string getNamespaceName ( )
	○ object getParentClass ( ) якщо цей клас від когось заекстенжений, він його поверне вже зарефлекшений. Мабуть коли я працюю через рефлекшн, то завжди коли я вибираю елемент через нього, елемент буде зарефлекшений, як у jqueru
	○ array getProperties ( )
	○ ReflectionProperty getProperty ( string $name )
	○ array getStaticProperties ( )
	○ mixed getStaticPropertyValue ( string $name [,string $default ] )
	○ bool hasConstant ( string $name )
	○ bool hasMethod ( string $name )
	○ bool hasProperty ( string $name )
	○ bool implementsInterface ( string $interface )
	○ bool isAbstract ( )
	○ bool isFinal ( )
	○ bool isInstance ( object $object ) чи цей клас є екземплярор класа $object
	○ bool isInstantiable ( ) - чи можна в ньому створювати обєкти. Типу якщо абстрактний, або інтерфейс то з них не можна
	○ bool isInterface ( )
	○ bool isInternal ( )
	○ bool isUserDefined ( )
	○ object newInstance ( mixed $args [, mixed $... ] ) - зразу зробити обєкт з нього. Зручно коли треба зробити пустишку на ходу, щоб не створювати окремо обєкт, присвоювати змінній...
	○ void setStaticPropertyValue ( string $name , string $value )
	○ string __toString ( )

Класс ReflectionMethod - схожий функціонал як для ф-ції, але трохи розширений 
// Создание экземпляра класса ReflectionMethod 
$method = new ReflectionMethod('Class', 'method'); - треба вкаказувати і клас у якому цей метод. Мабуть не обовязково клас, може бути і обєкт 
 Константы
	○ int IS_STATIC
	○ int IS_PUBLIC
	○ int IS_PROTECTED
	○ int IS_PRIVATE
	○ int IS_ABSTRACT
	○ int IS_FINAL
 Свойства
	○ public $name
	○ public $class
 Методы
	○ ReflectionClass getDeclaringClass ( )
	○ mixed invoke ( object $object [, mixed $parameter [, mixed $... ]] ) - Викликає цей метод в контексті $object. Але статичне свойство, викликається з класа а не з обєкта, тож указувати обєкт для нього нема сенсу, спеціаліст писав у дужках null  
	○ bool isAbstract ( )
	○ bool isConstructor ( )
	○ bool isDestructor ( )
	○ bool isFinal ( )
	○ bool isPrivate ( )
	○ bool isProtected ( )
	○ bool isPublic ( )
	○ bool isStatic ( )

Класс ReflectionExtension - це для розширень. Спеціаліст для цього наводив приклад стартних ф-цій php ( count, pow ) // $ext = new ReflectionExtension('standard'); - тут будуть даны про пхп
 Свойства
	○ public $name
 Методы
	○ __construct ( string $name )
	○ array getClasses ( ) - класи, які використовує це розширення
	○ array getClassNames ( )
	○ array getConstants ( )
	○ array getDependencies ( )
	○ array getFunctions ( )
	○ array getINIEntries ( )
	○ string getName ( )
	○ string getVersion ( )
	○ string __toString ( )

 - ReflectionProperty - це для свойств класа - $prop = new ReflectionProperty('String', 'length'); - дані про свойство length у типа String
	$prop->getValue($obj) - поверне значення свойства length в контексті $obj
	$prop->setValue($obj, 10) - установить  значення 10 для length в контексті $obj

 - Короче і свойст і методів і самих рефлекшнів є більше. Я записав тільки самі популярні. І уточнити, можливо робота з статичними і звичайними методами відрізняються один від одного


Reflection API: примеры
// Получаем экземпляр класса ReflectionClass
	$rc = new ReflectionClass('Имя_класса');
​
// Наследует ли класс тот или иной интерфейс?
	$rc->implementsInterface('Имя_интерфейса');
​
// Имеет ли класс тот или иной метод?
	$rc->hasMethod('Имя_метода');
​
// Получаем экземпляр класса ReflectionMethod
	$rm = $rc->getMethod('Имя_метода');
​
// Является ли метод статическим?
	$rm->isStatic();
​
// Выполнение статического метода
	$result = $rm->invoke(null);
​
// Выполнение обычного метода
	$instance = $rc->newInstance();
	$result = $rm->invoke($instance);



 3) Комент /** придуманий для того, щоб пхп його бачив і з ним можна було працювати. Дефолтні значення для роботи з ними я не знаю, але в рефлекшні щоб його побачити, є метод getDocComment ( ) майже у всіх елементів щоб побачити цей комент. Щоб не було помилки, після першої лінії з коментом, після зірочки і останньої не повинно бути нічого крім перевода строки 

 composer install - робиться 1, всі інші рази, коли мені треба оновити пакунки - composer update

 











	pathinfo() — Возвращает информацию о пути к файлу, розбиваючи його на масив
	У класі можна написати і так class Counter { Counter::method }

Камень первый — статической переменной присваивать можно только константы или константные выражения. Вот такой код:
static $a = bar();

с неизбежностью приведет к ошибке парсера. К счастью, начиная с версии 5.6 стало допустимым присвоение не только констант, но и константных выражений (например — «1+2» или "[1, 2, 3]"), то есть таких выражений, которые не зависят от другого кода и могут быть вычислены на этапе компиляции


Камень второй — методы существуют в единственном экземпляре. 
class A {
  public function foo() { - метод будет существовать лишь в одном экземпляре, просто при каждом вызове в него будет пробрасываться разный $this. 
    static $x = 0;
    echo ++$x;
  }
}

$a1 = new A;
$a2 = new A;

$a1->foo(); // 1
$a2->foo(); // 2
$a1->foo(); // 3
$a2->foo(); // 4

наследование класса (и метода) приводит к тому, что всё-таки создается новый метод:


class A {
  public function foo() {
    static $x = 0;
    echo ++$x;
  }
}

class B extends A {
}

$a1 = new A;
$b1 = new B;

$a1->foo(); // 1
$b1->foo(); // 1
$a1->foo(); // 2
$b1->foo(); // 2

Вывод: динамические методы в PHP существуют в контексте классов, а не объектов. И только лишь в рантайме происходит подстановка "$this = текущий_объект"

 ----------------------
static в класі буде означати що змінна принадлежить класу а на екземпляру обєкта. У статичних свойств і методів немає $this. Тобто у класі запис $this->name = '...'; або $this->method();

avacode - для psd


