1. Типи: 
 - Скалярні:
	- boolean // true('1') /false(''/0) , регістронезависимі
	- integer // будь-яке ціле число.
	- float (число с плавающей точкой) // не ціле число.
	- string // Тут є різниця з java-script. Одинарні лапки це тільки строка, у них не діє ні показ змінної, ні свойства обратного слеша, ні щось інше. А у подвійні можна покласти змінну і вона буде читатися як змінна. Також присутні \n, \t. Обратний слеш грає таку саму роль як і в java-script. У PHP знак $ означає, що це ім’я змінної. Якщо я хочу просто поставити $, то треба поставити перед ним обратний слеш. Із лапками так само. Із обратним слешом так само.
 - Змішані:
	- array
	- object
 - Спеціальні
	- resource - змінна, в якій ссилка на зовнішній ресурс.
	- NULL - РегістроНЕзависимий. Змінна, якій не присвоєно значення має тип null.
 - Щоб змінити тип елемента, треба перед ним у дужках написати тип на який я хочу змінити. Самий елемент при цьому не зміниться, тож треда це	 результат брати у дужки. $new = (boolean) 'string'; 
2. У PHP є Heredoc.Для ісходного кода тіпа <pre> у html. Як я напишу, так ото й буде. У heredoc мош поміщати html код і не боятися за проблем з лапками, тобто можна нічого не екранувати. По ходу він предназначений, щоб у нього можна було класти великі куски кода. <<<metka ... metka; Но про нього треба знати 2 речі, інакше буде помилка
	- metka може складатись з букв, цифр або знаків підчеркування і починатись тільки або з букви або з нижнього підчеркування.
	- Після оператора <<< зразу написати ідентифікатор(metka), а потім вже перевод строки(enter)
	- Закрывающий идентификатор должен стоять в первом столбце строки.
	- Строка с закрывающим идентификатором не должна содержать других символов (навіть пробел), за исключением, возможно точки с запятой(;). Якщо heredoc не добре закрити, php подумає, що я його взагалі не закривав і покаже помилку на останній строці кода.
	- Якщо ідентифікатор(metka) взяти в лапки - це буде приблизно теж саме, що і з лапками. У подвійні лапки можна підставляти знінні, а у одинарні не можна. Короче краще їх не класти.
3. PHP думає, що змінна - це від $ до пробела. Тож не забувати про Екранування. 
	- {$name} - краще використовувати цей варіант
	- ${name}
4. Робота зі строками схожа на java-script, тільки замість [], {}. Наприклад є $str = 'This is a test.';
	- Щоб взяти перший символ - $str{0}; // $first = $str{0};
	- Але і [] теж можна, тільки дуде не рекомендується
5. Ф-ція strlen() - Вкаже скільки символів в строці. // strlen($name);
6. Якщо є арифметична операція, PHP завжди буде старатися перевести все в цифри
	- 10 * true(1) = 10;
	- 10 * false(0) = 0;
	- 'string' * 5 = 0; - коли строка на число, строка перетворюється в 0.
	- '7' * 5 = 35; - коли строка схожа на число, строка перетворюється в число.
	- '7_string' * 5 = 35; - тіпа parseFloat(); '7_string' буде 7
	- 'f787' // 0
7. Крапка '.' - склеює строки, цифри. 
8. Також схожа на java-script операції
	- '+=' - додавання чисел
	- '.=' - склеювання строк
	- ітд.
9. Оператор '@' кладеся перед ф-цією і якщо у ф-ції є помилка, @ скаже PHP, щоб він її проігнорував.
10. Оператор (``) - виповнить строку як консольну команду.
11. Ф-ція gettype(); поверне тип змінної строкою // gettype($name);
	- Якщо буде тип float, то повернеться dubble.
	- Якщо буде тип 'NULL', повернеться 'NULL'
 - Якщо змінній нічого не присвоїно, або я її видалив - вона буде мати тип null
12. Ф-ція settype(); - переробить елемент з одного типа на інший. Змінна, тип якої я міняю зміниться.
	- $foo = '5bar';(строка)  settype($foo, 'integer'); // $foo тепер 5(ціле)
	- Щоб сама змінна не змінювалась, можна написати $new = (boolean) $foo; // $new буде boolean, а $foo залишиться без змін, оскільки він працював з копією $foo. Коли я роблю якісь операції між різними тапами, PHP неявно приводить не integer в integer // $x = true; $new =  (integer) $new * 3;
13. Котстанти - тіпа змінної, але її значення не міняються. Всі звикли оприділяти константу ф-цією define(); Константу не можна ні видалити ні змінити. Зазвичай константам задають ім’я великими буквами
	- define("CONSTANT", "Здраствуй, мир."); - старий варіант, до якого всі звикли. Якщо вкінці покласти 'true', константа буде регістронезависима // define("CONSTANT", "Здраствуй, мир.", true);
	- const CONSTANT = "Здраствуй, мир."; // З’явився в PHP 5.3
	- Константи доступні в будь-якому місці коду.
	- Константи можуть мати тільки скалярні значення
	- Константи не можна писати у лапках, їх можна тільки конкатеніровати
11. if else точно так як у java-script;
13. Переобразование в boolean (false)
	- саме false
	- integer 0
	- float 0.0
	- Пуста строка '0'
	- Масив без елементів
	- особый тип NULL
 - Все остальне TRUE
14. Ф-ція isset() - Вкаже чи змінна оприділина. // isset($name); Якщо змінна є, поверне '1', якщо її нема, повернеться пустота. 
	- empty - Вкаже чи змінна пуста. Якщо змінна пуста поверне '1', якщо не пуста, повернеться пустота. 
	- Ф-ція unset(); - Унічтожит змінну.
15. Логічні оператори
 - Оператори зрівнення такі самі як у java-script, а логічні відрізняються
	- and - тіпа && у java-script і має дуже малий приорітет
	- or - тіпа || у java-script, і має дуже малий приорітет
	- xor - or навпаки. // $a xor $b - true если $a или $b true, но не оба.
	- ! - так само, як в java-script.
	- && - теж саме, що and, але приорітет великий, більший як у оператора присвоювання
	- || - теж саме, що or, але приорітет май великий, більший як у оператора присвоювання
16. Для PHP на сторінці нічого не ділиться, для нього це все один код. І HTML- код теж він теж виводить прилизно echo <html>; echo <body>; Але договорилися, що не обовязково класти echo перед тегами, PHP це буде розуміти і так. Так склалася ситуація, що тепер php-сторінка схожа на html сторінку і перед тегами немає echo. Але якась різниця є, бо щоб написати PHP, треба відкрити скобки для нього <?php ?>.
 - Отже якщо сторінка для PHP не ділиться на блоки, то можна взяти конструкцію if{ І помістити сюди  кусок коду html //
<html>
 <body>
  <?php if(...){ ?>
	тут куски коду html 
  <?php } ?>
	тут куски коду html 
 <body>
</html>
17. У PHP є аналог {}
if(...):
	...;
else if(...):
	...;
else:
	...;
endif; // - закінчується завжди на endif;
	- else, elseif - можна і е писати. Фігурні дужки теж не писати. Буває полезно 
	- також цей синтаксис з двокрапкою можка використати для цикла while, for, switch
