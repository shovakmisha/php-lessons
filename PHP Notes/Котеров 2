 1) Дата знаходиться в php.ini в ключі date.timezone. Коли сервак устанювлює дату, він звертається сюди. Якщо її не вказати, буде помилка. Щоб всказати, треба дати цьому ключу значення "Europe/Moscow" наприклад. аБО Ф-цією date_default_timezone_set("Europe/Moscow");
 2) int time() - повертає таймстеп часу (текущого за замовчуванням), починаючи з 1970 01 01
	- microtime() - більш точний таймстемп. Цією ф-цією можна перевіряти швидкість скріпта. Якщо сервер загружений, скріпт виконується довше
 3) date() - може хранити у собі не тільки текущу дану, але і таймстеп, якщо я покладу його туди. І з цього можна витягнути дату у якому хочу форматі, головне правильно вказати формат в дужках
	- strftime() - Те ж саме, хоча ця ф-ція залежить від того, де знаходиться користувач і буде пробувати показувати дату на його мові // ru_RU
 - mktime() - зробить таймстемп. Аргументи ф-ції підставляти не обовязково, замість них підставиться значення текущого часу. Не обовязково підставляти, я маю на увазі з права на ліво, рік на приклад можна вказувати, підставиться текущий. Останній аргумент у цій ф-ції - це зимній, літній час.
	- осторожно з цією ф-цією. Вона не має помилок вроді. Тут діє вся ця херня з 13-м місяцем і тд
 - getdate( $timestamp ) - получиться масив з датою. У мавиві будуть ключі секунда, день...
 4) Julian Day Count (JDC) - Юліанський календар. Ми з ним працюєм в програмуванні
	- Коли треба працювати з дуже древніми або дуже далекими (3000р), то тут вже треба вказувати дату чере ф-цію GreqorianToJ
	- там ще є ф-ціє з цим календарем і з іншими і переводами 1 в інший, але довго розписувати, краще загуглити
 5) checkdate() - перевіряє чи існує дата, яку я їй передав в дужках в Григоріанському календарі. Дивно що в григоріанському, раніше він писав, що пхп використовує Юліанський, можливо помилявся
	- Типу у цій ф-ції перевіряється правильність формату, наприклад 30 лютого.
 6) В файлі calendar.php, Котеров написав хороший календар на теперішній місяць
	- До речі тернарний оператор можна написати і так - <?= $i == 6 ? 'color:red' : '' ?>
 7) Greenwich Mean Time - GMT; теж саме, що UTC;
	- Наприклад у місті Грінвіч тепер 01 00, Москва має +03 00, то ж в Москві тепер 4 години ночі
	- Котеров не дав універсального рецепта, як працювати з датами, Сказав тільки, що якщо є ситуація, де треба кожному користувачу виводити дату, і щоб був час такий як його країні ( Наприклад у користувача виводиться інфа, коли він останній раз заходив на сайт ), то у базі треба буде хранити час по Грінвічу, а йому вже коли буде виводитись, то треба буде оприділити його місцеположення і приплюсувати йому години (+03 00)
 8) Котеров робив приклад ф-ції, де він визначав локальний час користувача // 375 ст
 9) ПХП розробники дають можливість написати свою фі-цю при завершенні скріпта і не важлило чи він просто завершився чи із за помилки. її можна використати щоб занести інфу у буфер або у файл логів або як заманеться
	- Для цього треба зареєструвати її як фіналізатор - register_shutdown_function ().
	- exit() i die() теж викличуть цю ф-цію
	- вивести у браузер цією ф-цією нічого не можна // echo не спрацює
	- зазвичай вона викликається вже після зєднання сервера з клієнтом. Тож виводити дані сервера цією ф-цією нема сенсу
	 - І взазалі в пхп після помилки мало що можна зробити
 10) В пхп теж є анонімні ф-ції
 11) usleep(), sleep() - скріпт може завмерти на скільки вкажу. Це можна використати, токи закриється файл, або щось таке

------------ ООП --------------
 12) Клас - тип (якоїсь змінної). Наприкдад у класа int є свойства(методи) для всіх операцій з числами +-*/....
	- Типу клас - це кастомний тип даних
 13) Змінна класа - обєкт класа
 Інкапсуляція - дані, які належать до класа, зберігаються в його свойствах і до них огранічений доступ в основному за допомогою інших методів
 14) Клас - тип даних. Створюється за допомогою команди class
 15) Рекомендація - 1 файл - 1 клас. Для полегшення пошуку
 16) значення не обовязково храниться у змінних - echo 1 + 2 створить значення 3 до якого не пивязана ніодна змінна
 17) Щоб створити обєкт класа, використовується ключове слово new
	$obj = new SomeClass; - $obj буде хранити всі дані класа

<?php ## Пример класса.
  class MathComplex
  {
    // Свойства: действительная и мнимая части.
    public $re, $im;
    // Метод: добавить число к текущему значению. Число задается
    // своей действительной и мнимой частью.
    function add($re, $im)
    {
      $this->re += $re;
      $this->im += $im;
    }
  }
?>
 18) $this завжди присутній внутрі методів класу
 19) Ф-ція, яка находится в класі, може бачити $this. І всі його змінні теж.
	  class MathComplex
	  {
	    public $re, $im;
	    function add($re, $im)
	    {
	      $this->re += $re; MathComplex->add(10,20) збільшить public $re, $im; на 10 і 20
	      $this->im += $im;
	    }
	  }

 20)  Агрумен у ф-цїї може бути будь що, наприклад обєкт класа. Наприклад є якиїсь обєкт і зразу у дужках ф-ції я присвою його обєкту 
	// class MyClass{}; function (MyClass $myObj){}; І тепер $myObj обвязково має бути обєктом MyClass. ТОбто $myObj має або наслідувати MyClass або шось у тому роді. Короче я десь писав вверху що клас це тип даних. MyClass - це тип. Так само як і масив або строка. Щоб привести елемент до якогось типу треба написати перед ним цей тип. Як я робив провірку для даних форми, які мають бути числами (id наприклад) // int $id.
Тут так само тыльки замість int MyClass
	- Трохт запутано. ця конструкція в круглих дужках ф-ції (MyClass $myOb) присвоює MyClass змінній $myOb традиційним методом скоріш за все, типу $myOb = MyClass; Але так обєкти не створюються, вони створюються оператором new. Мабуть краще щоб при виклику такої ф-ції у дужках була змінна вже з готовим обєктом, створеним через цей оператор, але якщо її немає і мені треба поставити туди клас, то треба дописати тудм оператор new // (new MyClass $myOb) або $add = new Context( new Add );
