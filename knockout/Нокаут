
приблизно так

value = viewModel['title']; - це значення береться з вюшки
textNode = document.createTextNode(value); - створюється з нього вузел. І цей вузел додається в дерево


 ---------------- knockout - фреймворк -------------------

 1) view - view Model -View

	- Model (бізнес модель)- Дані які звідкись беруться. Їх получає кнокаут. Типу фронту до них немає діла 

	- view - То що бачить клієнт (хтмл)

	- view Model - Бере дані з моделі і відправляє їх на вюшку або навпаки - відправляє нані з браузера на модельку (на сервер)

 2) Якщо я підключив кнокаут у файл. То у файлі я вже маю обєкт кнокаута ko

 3) <h1>Привет, <span data-bind="text:name"></span></h1> - Привет, Guest . Свойство даної вю моделі name типу string . data-bind це нокаутовский атрибут. Тобто data-bindуууу="text:name" не спрацює

	var customer = { name: 'Guest', location: 'Lutsk' }; 

	ko.applyBindings(customer); - можна приціпити якиїсь отдільний участок а не весь темплейт. ko.applyBindings(customer, document.getElementById(""));

	- Тобто це я вказав нокауту що для цього вю (цей хтмл файл, ну або до якого ти привязаний), буде назначена тукуща модель вю ko.applyBindings(customer);

 4) Тепер я написав customer.name = 'New name'; після ko.applyBindings(customer); і нічого не помінялось (якщо до, то імя зміниться)

	- Але ж суть нокаута у тому щоб змінювалось на ходу. Для цього мені треба написати це свойство так var customer = { name: ko.observable('Guest') };

		- observable - наблюдение. Воно працює в обі сторони. його на ходу можна міняти і в скріпті і в браузері (в інпуті наприклад)

		- Але після цього свойство name вже не строка і я не може поміняти його так - customer.name = 'New name';

		- customer.name('New name'); - А вже так зміниться. Після цього name це вже метод обєкта customer з аргументом 'New name'

		- console.log(customer.name()); - виведе 'New name'. Тобто щоб дістати значення вказую пусті дужки, щоб засетити значення, пишу в дужках це значення.

		- var announsedCourse = ko.observable( new Course("Super course", 2000) ); - обєкти теж мо

 5) Але писати до кожного атрибуту отдільний метод не удобно. Щоб це все обєднати, є метод computed

	- <span data-bind="text:info"> - this.info = ko.computed(function () { - після цього 
						return "Привет " + self.name() + " из " + self.location();
					      });

						- Це я в модель вю кастомера Customer в якої є свойства name і location і вона привязана до цього темплейта - ko.applyBindings(new Customer());

	- Тобто коли я дьогаю один якийсь метод, запускається ф-ція computed.

	- Другим аргументом у ф-ції computed йде обєкт у контексті якого буде виконуватись ф-ція, яка передана першим аргументом. Допомагає з заморочками this і тд...

	- computed - буде викликатись кожен раз, коли обсервабл елементи у ній змінюються.

		- Хоча навіть якщо написати <span data-bind="text:someFunction"> // someFunction = function(){ return 'something' ;} - то це теж работає
					    
 

 -------- Далі я переніс частину першого уроку ц файл demo2.html --------

 Методы наблюдаемых массивов. Тобто обєкт observableArray буде мати ці методи
	deleteItem = function(item) {
		observableArray.remove(item);
		observableArray.destroy(item);
	};

	push(), pop(), unshift(), shift(), 

	remove() - видалить елемент

	removeAll(), 

	destroy() - це теж видалить елемент, але це більш схоже на те що це буде скритий елемент. Суть у тому що у кнокаут елементів є свойство __destкoy. І якщо воно = тру, то елемент буде ніби виделений. Наприклад елемент у якого свойство дестрой було тру, не виводився вже у таблиці у якій я форічом виводив всі елементи масива у якому були елементи нокаута.

		- можна щоб дестроєні елементи виводились в форічі. Для цього треба переробити з цього <tbody data-bind='foreach: coursesList'> на <tbody data-bind='foreach:coursesList, , includeDestroyed:true'> 

	destroyAll(), sort(), reversed(), slice(), indexOf()


 --------------- Привязки -------------------

 6) За $root я вже писав у коді

	- $parent - вище стоящий контекст (типу батько текущої області)

 7) $data - це як this. але краще підходить як $value з пхпшного foreach($key => $value) - тобто текуще значення даного контекста. Контекст може бути і цикл (елементи масива)

	- <td data-bind='text: title'></td> виведе те саме що і <td data-bind='text: $data.title'></td> так як $data це і є this. область у якому знаходиться title

	- А з масивами ваще агонь. в нокауті масив виглядає так foreach:regs - тут не має $key => $value щоб вивести значення масива типу regs[key]. Тут знадобиться привязка $data. 
		<ul data-bind='foreach:regs'>
                	<li data-bind='text:$data'></li> - виведе текуще значення масива regs

	- Тобто цикл змынюэ контекст для його елементів

 8) $index - хранить у собі порядковий номер ітерації цикла. Але якщо його змінити data-bind='text: $index +1' - буде помилка, а так вже норм - data-bind='text: $index()+1'. Це із за того що $index - обсервабл. Приклад візьму з іншої змінної - this.discount = ko.observable(discount); - console.log(this.discount()) -

 9) Умови - <td data-bind="if:discount() > 0"> - discount це обсервабл свойство контекста з якого тянуться дані в хтмл, тому discount()

	- ifnot: теж є

 10) with - звязати обєкт з нокаутом, який не привязаний до цієї вюшки. Тобто можна звязатись з любим обєктом. Типу як ko.applyBindings.

	- var announsedCourse = ko.observable( new SomeObject("property") ); - <p data-bind="with:announsedCourse"> <span data-bind='text: property'></span> </p>

--------------------------------------

Типы "видовых" привязок

	text: <value>
		<strong data-bind = 'text: methodName'></strong> - аналог скріптового innerText 

	textInput: Це для інпутів - <input type="text" data-bind="textInput: varible">

	html: <value>
		<strong data-bind='html: methodName'></strong> - аналог скріптовог innerHtml

	visible: <condition>
		<td data-bind='visible: returnNumber() > 0'> - аналог display:none; Можна ставити кондішни при яких умовах елемент не виведеться

			- visible взагалі не виведе ячейку. Якби я написав if замість visible, то не вивелося б содержиме ячейки, але саму ячейку було б видно

	css: <object>
		<span data-bind = "css:{className: returnNumber() > 0}">Paint it!</span> - добавити якиїсь клас елементу, якщо умови підходять (returnNumber() > 0). Схоже на тернарний оператор

			- css:{className: returnNumber() > 0} + з синаксису можна зрозуміти що класи хранятся в обєкті

			- <span data-bind="text:discountFormat, css:{discount: discount() > .15}"></span> - весь функціонал елемента можна писати в одній строці. Тобто і виводити якусь інфу в елементі і давати клас елементу

	style: <object>
		<span data-bind="style:{color: returnNumber() > 0 ? 'red' : 'black'}">Paint it!</span> - прописує стилі інлайном. 

	attr: <object>
		<a data-bind = 'attr: {href: link}'>Some link</a> - додасть атрибут href.

		- ЩЕ ДУЖЕ ВАЖЛИВО. ЩОБ РОЗЩИРИТИ ОБЭКТ НОКАУТА НАХОДУ МОЖНА ТУДИ ДОБАВЛЯТИ ШОСЬ НОВЕ ЯК В СКРІПТІ - object.someNew = 'new'. Якщо нокаут обэкт обсервабл, то object().someNew = 'new'



 Интерактивные привязки
	click: <method>
		<button data-bind='click: someMethod'>Нажать</button>

	value: <property>
		<input type="text" data-bind='value: someValue' /> - фція someValue() буде віддавати велью. Це підходить для інпутів, textaria, ... Я думаю це те саме що attr{value: someValue()}

		-  valueUpdate - може бути у інпутів і у текстарії. Суть у тому що коли в мене є такий запис - <input id="one" type="text" data-bind="value:firstName"> - (this.firstName = ko.observable('one');) то this.firstName буде змінюватись коли інпут втратить фокус. valueUpdate - відповідає за то, коли апдейтити this.firstName (keyup, keypress, ...)

		- <input id="one" type="text" data-bind="value:firstName, valueUpdate: 'keyup' ">

	event: <object>
		<div data-bind='event:{mouseover: methodOne, mouseout: methodTwo}'>...</div>

			- Кароче тут все як в скріпті <button data-bind="click:showData">Нажать</button>

									this.showData = function (model, event) {
										console.log(model.firstName(), "нажал на кнопку"); - model це this. як бачу назва не мусить бути model, просто перший аргуметн це this
										console.log("Событие ", event.target); - event - це другий аргумент. як бачу назва не мусить бути event, просто другий аргуметн це івент. Це наскільки я зрозумів звичайний скріптровський івент і в нього є ці всі ф-ції - e.type, e.target...
									};
	​
	submit: <method>
		<form data-bind = "submit: doSomething">

	enable: <property>
		<input type="text" data-bind='value: val1' />
		<input type="text" data-bind='value: val2, enable: val1' /> - Якшо у першому інпуті тру, то це поле буде доступне. Як бачу по коді, це добавляється атрибут disable до елемента - http://joxi.ru/p27a7yxIoMaVDr
	​
	disable: <property> - те саме що і enable, тільки навпаки. Це теж актуально тільки для елементів де можна шось вводити (інпути, текстарії)

	checked: <property>
		<input type="checkbox" data-bind='checked: val' /> - Суть у тому, що якщо я маю <input form="f" type="checkbox" data-bind="value:agree"/> - неактивний чекбокс
																	    this.agree = ko.observable(false); - agree == фолс
			- <button data-bind="click:showData, enable:agree">Флаг</button> - і я маю кнопку, яка доступна тільки тоді, коли чекбокс активний. Я клацаю на чекбокс і кнопка всерівно не доступна, хоча agree обсервабл. Чекбокс оприділяється чи він чекнутий по свойству checked - <input form="f" type="checkbox" data-bind="checked:agree"/> - тепер все ок

			- value для чекбокса - це скоріш за все як значення за замовчуванням, а не текуще значення

			- this.goods = ko.observableArray(['one', 'two']); - <input form="f" type="checkbox" data-bind="checked:goods, value: 'one' "/>
   									   - <input form="f" type="checkbox" data-bind="checked:goods, value: 'two' "/>

	options: <array>
		<select data-bind='options: value, value: currentValue'></select>
		<select data-bind='options:list, optionsText:"Text", optionsValue:"Value"'></select>

	selectedOptions: <array>
		<select data-bind = "options: coursesList, selectedOptions: currentCourse"></select>
				
---------------------------------------------
				(<!-- options:coursesList - вказую що опціями цього селекта будуть обєкти з обсервебл масива this.coursesList - на даний момент виведуться обэкти, так як в масиві обэкти-->
                                            <!-- optionsText:'title' - В якості текста у опшнів, буде братись свойство  title з обєктів у масиві this.coursesList - http://joxi.ru/J2bglQGfX3VJWA -->
                                            <!-- optionsValue: 'value' - В якості value у опшнів, буде братись свойство  value з обєктів у масиві this.coursesList - http://joxi.ru/Q2Kz7o6i4Nv1gm -->
                                            <!-- selectedOptions: selectedCourse -Велью за замовчуванням-->

    <select form="f" name="newSelect" id="" data-bind="options:coursesList
                                            ,optionsText:'title'
                                            ,optionsValue: 'value'
                                            ,selectedOptions: selectedCourse"></select>)
---------------------------------------------

	hasfocus: <property>
		<input data-bind = 'value: val, hasfocus: true' />

---------------------------------------------

	<div data-bind="pulseStormHelloWorld:message"></div> - Можна створювати кастомні привязки

		jQuery(function(){    
		    var viewModelConstructor = function()
		    {   
			this.message = "Hello World";
		    }  

		    ko.bindingHandlers.pulseStormHelloWorld = {
			update: function(element, valueAccessor){
			    jQuery(element).html('<h1>' + valueAccessor() + '</h1>');
			}
		    };    
		    ko.applyBindings(new viewModelConstructor);        
		});


 ----------------------------------

	Обратите внимание на то, что свойство self.meal является массивом объектов, а доступ к свойству объекта можно получить как: array().property

 ---------------------------------

------------------------------------------------------------------------------------------------------------------------------

 - afterRender: someMethod(elem (dom відмальованих елемента), data (текущий елемент в циклі)) - Викликати якиїсь метод після того як відрендерився темплейт - <li data-bind="text:title, afterRender:someMethod"></li>

 - beforeRemove - перед тим як видалився елемент з масива я з якого беруться дані для для рендеринга, 


 - В консолі браузера оюєкт нокаута теж видно і з консолі можна з ним працювати (міняти на ходу і тд)

 - Шаблон - это просто стандартный набор узлов HTML с привязками KnockoutJS.


 - 
	var list = [
	document.getElementById("x"),
	document.getElementById("y"),
	]
	template: list - Так теж можна підключити шаблони. Єдине що підключиться весь вузел а не тільки його діти - http://joxi.ru/82QB5lacjle6oA



  - На уроці я створював компонент і створював компонент на його основі і передавав його параметри. Типу як є конструктор і обєкт на основі цього конструктора.

	<div data-bind="component: {name: 'text-field'}"></div>
	<div data-bind="component: {name: 'text-field', params: {initialText: '!!!'}}"></div>

		ko.components.register('text-field', { viewModel: function (params) {

	- Але це не єдиний спосіб, створити компонент і передати потрібні параметри компоненту. Можна прям назвати хтмл тег іменем компонента і передати йому параметри - <text-field params="initialText:'Custom'"></text-field>

		- Це створиться новий компонент text-field - http://joxi.ru/823dpX3TJZN6XA . Тобто це привязка до компонента, тільки без data-bind 

		- Можна параметрами передати обєкт - <text-field params="obj:{a:1, b:2}"></text-field>

			- <text-field params="obj: new someFunction()"></text-field>

		- Можна параметрами передати все що хочу - <text-field params="obj: true"></text-field> 

								<text-field params="obj: 'sometext'"></text-field>

								<text-field params="obj: 777"></text-field>

								<text-field params="obj: 2 + 2 "></text-field> (<text-field params="obj: 4"></text-field>)

								- Тобто у лапках виконується джава скріпт і туди можна писати джаваскріптовський код






