


 ---------------- knockout - фреймворк -------------------

 1) view - view Model -View

	- Model (бізнес модель)- Дані які звідкись беруться. Їх получає кнокаут. Типу фронту до них немає діла 

	- view - То що бачить клієнт (хтмл)

	- view Model - Бере дані з моделі і відправляє їх на вюшку або навпаки - відправляє нані з браузера на модельку (на сервер)

 2) Якщо я підключив кнокаут у файл. То у файлі я вже маю обєкт кнокаута ko

 3) <h1>Привет, <span data-bind="text:name"></span></h1> - Привет, Guest . Свойство даної вю моделі name типу string . data-bind це нокаутовский атрибут. Тобто data-bindуууу="text:name" не спрацює

	var customer = { name: 'Guest', location: 'Lutsk' }; 

	ko.applyBindings(customer);

	- Тобто це я вказав нокауту що для цього вю (цей хтмл файл, ну або до якого ти привязаний), буде назначена тукуща модель вю ko.applyBindings(customer);

 4) Тепер я написав customer.name = 'New name'; після ko.applyBindings(customer); і нічого не помінялось (якщо до, то імя зміниться)

	- Але ж суть нокаута у тому щоб змінювалось на ходу. Для цього мені треба написати це свойство так var customer = { name: ko.observable('Guest') };

		- observable - наблюдение. Воно працює в обі сторони. його на ходу можна міняти і в скріпті і в браузері (в інпуті наприклад)

		- Але після цього свойство name вже не строка і я не може поміняти його так - customer.name = 'New name';

		- customer.name('New name'); - А вже так зміниться. Після цього name це вже метод обєкта customer з аргументом 'New name'

		- console.log(customer.name()); - виведе 'New name'. Тобто щоб дістати значення вказую пусті дужки, щоб засетити значення, пишу в дужках це значення.

 5) Але писати до кожного атрибуту отдільний метод не удобно. Щоб це все обєднати, є метод computed

	- <span data-bind="text:info"> - this.info = ko.computed(function () { - після цього 
						return "Привет " + self.name() + " из " + self.location();
					      });

						- Це я в модель вю кастомера Customer в якої є свойства name і location і вона привязана до цього темплейта - ko.applyBindings(new Customer());

	- Тобто коли я дьогаю один якийсь метод, запускається ф-ція computed.

	- Другим аргументом у ф-ції computed йде обєкт у контексті якого буде виконуватись ф-ція, яка передана першим аргументом. Допомагає з заморочками this і тд...
					    
 
 






 ----------------



