
 1) subscribe - підписатись на зміни.

	<input type="text" data-bind="textInput: inputText">
	var viewModel = {
	      inputText: ko.observable('333')
	    };

	viewModel.inputText.subscribe(function (newValue) { - inputText - без дужок. Кожного разу коли буде змінюватись содержиме інпута inputText, ця ф-ція буде викликатись
	      console.log(newValue); - newValue - це аргумент у який попаде содержиме інпута (змінної inputText)
	    })

 2) <input type="text" data-bind="textInput: inputText"> - в самому нокауті з дужки не треба писати inputText(). Якщо так напишу, то код виконається тільки один раз. Тобто якщо на клік повішу метод - він виконається 1 раз. Якщо це буде обсервабл свойство, він зміниться 1 раз

	- Він це оприділяє так - ko.utils.unwrapObservable(viewModel.inputText) - Тобто я передав аргументом модельку і її свойство. А кнокаут вже оприділяє чи вона обсервабл. Якщо так, то він дістане її значення, якщо ні, то теж поверне її значення

 3) В принципі це і так понятно, але можна клік вішати так - <button data-bind="click: function() {console.log(4)}">клік</button> - работає

	- ЦЕ ДУЖЕ ВАЖЛИВО ПРИ РОЗРОБЦІ. Тобто я можу у будь якому хтмл елементі напистати console.log(this) і виведеться контекст.

		Я зрозумів, що коли є такий запис - <input type="text" data-bind="textInput: inputText"> , то inputText (або люба інша змінна, метод) ЗАВЖДИ МАЄ КОНТЕКСТ. - viewModel.inputText або SomeObj.inputText - Тобто все як в скріпті - завжди є контекст. ТОбто цей контекст можна й самому задати.

	- <button data-bind="click: function() {console.log(this)}">клік</button> - виведе текущий обєкт контекста.

		- <button data-bind="click: function() {console.log($context)}">клік</button> - Виведеться дані контекстів. Всі які мені треба, які звязані з цим елементом ($parent, $root, $data)
